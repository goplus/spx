//go:build !js

/*
------------------------------------------------------------------------------
//   This code was generated by template ffi_gdextension_interface.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_gdextension_interface.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------
*/
package wrap

/*
#include <stdlib.h>
*/
import "C"

import (
	"fmt"
	. "github.com/goplus/spx/v2/pkg/gdspx/internal/ffi"
	. "github.com/goplus/spx/v2/pkg/gdspx/pkg/engine"
	. "github.com/realdream-ai/mathf"
	"reflect"
	"unsafe"
)

func BindMgr(mgrs []IManager) {
	for _, mgr := range mgrs {
		switch v := mgr.(type) {
		case IAudioMgr:
			AudioMgr = v

		case ICameraMgr:
			CameraMgr = v

		case IExtMgr:
			ExtMgr = v

		case IInputMgr:
			InputMgr = v

		case IPhysicMgr:
			PhysicMgr = v

		case IPlatformMgr:
			PlatformMgr = v

		case IResMgr:
			ResMgr = v

		case ISceneMgr:
			SceneMgr = v

		case ISpriteMgr:
			SpriteMgr = v

		case IUiMgr:
			UiMgr = v

		default:
			panic(fmt.Sprintf("engine init error : unknown manager type %s", reflect.TypeOf(mgr).String()))
		}
	}
}

type audioMgr struct {
	baseMgr
}
type cameraMgr struct {
	baseMgr
}
type extMgr struct {
	baseMgr
}
type inputMgr struct {
	baseMgr
}
type physicMgr struct {
	baseMgr
}
type platformMgr struct {
	baseMgr
}
type resMgr struct {
	baseMgr
}
type sceneMgr struct {
	baseMgr
}
type spriteMgr struct {
	baseMgr
}
type uiMgr struct {
	baseMgr
}

func createMgrs() []IManager {
	addManager(&audioMgr{})
	addManager(&cameraMgr{})
	addManager(&extMgr{})
	addManager(&inputMgr{})
	addManager(&physicMgr{})
	addManager(&platformMgr{})
	addManager(&resMgr{})
	addManager(&sceneMgr{})
	addManager(&spriteMgr{})
	addManager(&uiMgr{})
	return mgrs
}

// call gdextension interface functions

func (pself *audioMgr) StopAll() {
	CallAudioStopAll()
}
func (pself *audioMgr) CreateAudio() Object {
	retValue := CallAudioCreateAudio()
	return ToObject(retValue)
}
func (pself *audioMgr) DestroyAudio(obj Object) {
	arg0 := ToGdObj(obj)
	CallAudioDestroyAudio(arg0)
}
func (pself *audioMgr) SetPitch(obj Object, pitch float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(pitch)
	CallAudioSetPitch(arg0, arg1)
}
func (pself *audioMgr) GetPitch(obj Object) float64 {
	arg0 := ToGdObj(obj)
	retValue := CallAudioGetPitch(arg0)
	return ToFloat64(retValue)
}
func (pself *audioMgr) SetPan(obj Object, pan float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(pan)
	CallAudioSetPan(arg0, arg1)
}
func (pself *audioMgr) GetPan(obj Object) float64 {
	arg0 := ToGdObj(obj)
	retValue := CallAudioGetPan(arg0)
	return ToFloat64(retValue)
}
func (pself *audioMgr) SetVolume(obj Object, volume float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(volume)
	CallAudioSetVolume(arg0, arg1)
}
func (pself *audioMgr) GetVolume(obj Object) float64 {
	arg0 := ToGdObj(obj)
	retValue := CallAudioGetVolume(arg0)
	return ToFloat64(retValue)
}
func (pself *audioMgr) Play(obj Object, path string) int64 {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	retValue := CallAudioPlay(arg0, arg1)
	return ToInt64(retValue)
}
func (pself *audioMgr) Pause(aid int64) {
	arg0 := ToGdInt(aid)
	CallAudioPause(arg0)
}
func (pself *audioMgr) Resume(aid int64) {
	arg0 := ToGdInt(aid)
	CallAudioResume(arg0)
}
func (pself *audioMgr) Stop(aid int64) {
	arg0 := ToGdInt(aid)
	CallAudioStop(arg0)
}
func (pself *audioMgr) SetLoop(aid int64, loop bool) {
	arg0 := ToGdInt(aid)
	arg1 := ToGdBool(loop)
	CallAudioSetLoop(arg0, arg1)
}
func (pself *audioMgr) GetLoop(aid int64) bool {
	arg0 := ToGdInt(aid)
	retValue := CallAudioGetLoop(arg0)
	return ToBool(retValue)
}
func (pself *audioMgr) GetTimer(aid int64) float64 {
	arg0 := ToGdInt(aid)
	retValue := CallAudioGetTimer(arg0)
	return ToFloat64(retValue)
}
func (pself *audioMgr) SetTimer(aid int64, time float64) {
	arg0 := ToGdInt(aid)
	arg1 := ToGdFloat(time)
	CallAudioSetTimer(arg0, arg1)
}
func (pself *audioMgr) IsPlaying(aid int64) bool {
	arg0 := ToGdInt(aid)
	retValue := CallAudioIsPlaying(arg0)
	return ToBool(retValue)
}
func (pself *cameraMgr) GetCameraPosition() Vec2 {
	retValue := CallCameraGetCameraPosition()
	return ToVec2(retValue)
}
func (pself *cameraMgr) SetCameraPosition(position Vec2) {
	arg0 := ToGdVec2(position)
	CallCameraSetCameraPosition(arg0)
}
func (pself *cameraMgr) GetCameraZoom() Vec2 {
	retValue := CallCameraGetCameraZoom()
	return ToVec2(retValue)
}
func (pself *cameraMgr) SetCameraZoom(size Vec2) {
	arg0 := ToGdVec2(size)
	CallCameraSetCameraZoom(arg0)
}
func (pself *cameraMgr) GetViewportRect() Rect2 {
	retValue := CallCameraGetViewportRect()
	return ToRect2(retValue)
}
func (pself *extMgr) RequestExit(exit_code int64) {
	arg0 := ToGdInt(exit_code)
	CallExtRequestExit(arg0)
}
func (pself *extMgr) OnRuntimePanic(msg string) {
	arg0Str := C.CString(msg)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	CallExtOnRuntimePanic(arg0)
}
func (pself *extMgr) DestroyAllPens() {
	CallExtDestroyAllPens()
}
func (pself *extMgr) CreatePen() Object {
	retValue := CallExtCreatePen()
	return ToObject(retValue)
}
func (pself *extMgr) DestroyPen(obj Object) {
	arg0 := ToGdObj(obj)
	CallExtDestroyPen(arg0)
}
func (pself *extMgr) PenStamp(obj Object) {
	arg0 := ToGdObj(obj)
	CallExtPenStamp(arg0)
}
func (pself *extMgr) MovePenTo(obj Object, position Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(position)
	CallExtMovePenTo(arg0, arg1)
}
func (pself *extMgr) PenDown(obj Object, move_by_mouse bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(move_by_mouse)
	CallExtPenDown(arg0, arg1)
}
func (pself *extMgr) PenUp(obj Object) {
	arg0 := ToGdObj(obj)
	CallExtPenUp(arg0)
}
func (pself *extMgr) SetPenColorTo(obj Object, color Color) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdColor(color)
	CallExtSetPenColorTo(arg0, arg1)
}
func (pself *extMgr) ChangePenBy(obj Object, property int64, amount float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(property)
	arg2 := ToGdFloat(amount)
	CallExtChangePenBy(arg0, arg1, arg2)
}
func (pself *extMgr) SetPenTo(obj Object, property int64, value float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(property)
	arg2 := ToGdFloat(value)
	CallExtSetPenTo(arg0, arg1, arg2)
}
func (pself *extMgr) ChangePenSizeBy(obj Object, amount float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(amount)
	CallExtChangePenSizeBy(arg0, arg1)
}
func (pself *extMgr) SetPenSizeTo(obj Object, size float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(size)
	CallExtSetPenSizeTo(arg0, arg1)
}
func (pself *extMgr) SetPenStampTexture(obj Object, texture_path string) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(texture_path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	CallExtSetPenStampTexture(arg0, arg1)
}
func (pself *inputMgr) GetMousePos() Vec2 {
	retValue := CallInputGetMousePos()
	return ToVec2(retValue)
}
func (pself *inputMgr) GetKey(key int64) bool {
	arg0 := ToGdInt(key)
	retValue := CallInputGetKey(arg0)
	return ToBool(retValue)
}
func (pself *inputMgr) GetMouseState(mouse_id int64) bool {
	arg0 := ToGdInt(mouse_id)
	retValue := CallInputGetMouseState(arg0)
	return ToBool(retValue)
}
func (pself *inputMgr) GetKeyState(key int64) int64 {
	arg0 := ToGdInt(key)
	retValue := CallInputGetKeyState(arg0)
	return ToInt64(retValue)
}
func (pself *inputMgr) GetAxis(neg_action string, pos_action string) float64 {
	arg0Str := C.CString(neg_action)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	arg1Str := C.CString(pos_action)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	retValue := CallInputGetAxis(arg0, arg1)
	return ToFloat64(retValue)
}
func (pself *inputMgr) IsActionPressed(action string) bool {
	arg0Str := C.CString(action)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	retValue := CallInputIsActionPressed(arg0)
	return ToBool(retValue)
}
func (pself *inputMgr) IsActionJustPressed(action string) bool {
	arg0Str := C.CString(action)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	retValue := CallInputIsActionJustPressed(arg0)
	return ToBool(retValue)
}
func (pself *inputMgr) IsActionJustReleased(action string) bool {
	arg0Str := C.CString(action)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	retValue := CallInputIsActionJustReleased(arg0)
	return ToBool(retValue)
}
func (pself *physicMgr) Raycast(from Vec2, to Vec2, collision_mask int64) Object {
	arg0 := ToGdVec2(from)
	arg1 := ToGdVec2(to)
	arg2 := ToGdInt(collision_mask)
	retValue := CallPhysicRaycast(arg0, arg1, arg2)
	return ToObject(retValue)
}
func (pself *physicMgr) CheckCollision(from Vec2, to Vec2, collision_mask int64, collide_with_areas bool, collide_with_bodies bool) bool {
	arg0 := ToGdVec2(from)
	arg1 := ToGdVec2(to)
	arg2 := ToGdInt(collision_mask)
	arg3 := ToGdBool(collide_with_areas)
	arg4 := ToGdBool(collide_with_bodies)
	retValue := CallPhysicCheckCollision(arg0, arg1, arg2, arg3, arg4)
	return ToBool(retValue)
}
func (pself *physicMgr) CheckTouchedCameraBoundaries(obj Object) int64 {
	arg0 := ToGdObj(obj)
	retValue := CallPhysicCheckTouchedCameraBoundaries(arg0)
	return ToInt64(retValue)
}
func (pself *physicMgr) CheckTouchedCameraBoundary(obj Object, board_type int64) bool {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(board_type)
	retValue := CallPhysicCheckTouchedCameraBoundary(arg0, arg1)
	return ToBool(retValue)
}
func (pself *physicMgr) SetCollisionSystemType(is_collision_by_alpha bool) {
	arg0 := ToGdBool(is_collision_by_alpha)
	CallPhysicSetCollisionSystemType(arg0)
}
func (pself *platformMgr) SetWindowPosition(pos Vec2) {
	arg0 := ToGdVec2(pos)
	CallPlatformSetWindowPosition(arg0)
}
func (pself *platformMgr) GetWindowPosition() Vec2 {
	retValue := CallPlatformGetWindowPosition()
	return ToVec2(retValue)
}
func (pself *platformMgr) SetWindowSize(width int64, height int64) {
	arg0 := ToGdInt(width)
	arg1 := ToGdInt(height)
	CallPlatformSetWindowSize(arg0, arg1)
}
func (pself *platformMgr) GetWindowSize() Vec2 {
	retValue := CallPlatformGetWindowSize()
	return ToVec2(retValue)
}
func (pself *platformMgr) SetWindowTitle(title string) {
	arg0Str := C.CString(title)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	CallPlatformSetWindowTitle(arg0)
}
func (pself *platformMgr) GetWindowTitle() string {
	retValue := CallPlatformGetWindowTitle()
	return ToString(retValue)
}
func (pself *platformMgr) SetWindowFullscreen(enable bool) {
	arg0 := ToGdBool(enable)
	CallPlatformSetWindowFullscreen(arg0)
}
func (pself *platformMgr) IsWindowFullscreen() bool {
	retValue := CallPlatformIsWindowFullscreen()
	return ToBool(retValue)
}
func (pself *platformMgr) SetDebugMode(enable bool) {
	arg0 := ToGdBool(enable)
	CallPlatformSetDebugMode(arg0)
}
func (pself *platformMgr) IsDebugMode() bool {
	retValue := CallPlatformIsDebugMode()
	return ToBool(retValue)
}
func (pself *platformMgr) GetTimeScale() float64 {
	retValue := CallPlatformGetTimeScale()
	return ToFloat64(retValue)
}
func (pself *platformMgr) SetTimeScale(time_scale float64) {
	arg0 := ToGdFloat(time_scale)
	CallPlatformSetTimeScale(arg0)
}
func (pself *platformMgr) GetPersistantDataDir() string {
	retValue := CallPlatformGetPersistantDataDir()
	return ToString(retValue)
}
func (pself *platformMgr) SetPersistantDataDir(path string) {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	CallPlatformSetPersistantDataDir(arg0)
}
func (pself *platformMgr) IsInPersistantDataDir(path string) bool {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	retValue := CallPlatformIsInPersistantDataDir(arg0)
	return ToBool(retValue)
}
func (pself *resMgr) CreateAnimation(sprite_type_name string, anim_name string, context string, fps int64, is_altas bool) {
	arg0Str := C.CString(sprite_type_name)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	arg1Str := C.CString(anim_name)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	arg2Str := C.CString(context)
	arg2 := (GdString)(arg2Str)
	defer C.free(unsafe.Pointer(arg2Str))
	arg3 := ToGdInt(fps)
	arg4 := ToGdBool(is_altas)
	CallResCreateAnimation(arg0, arg1, arg2, arg3, arg4)
}
func (pself *resMgr) SetLoadMode(is_direct_mode bool) {
	arg0 := ToGdBool(is_direct_mode)
	CallResSetLoadMode(arg0)
}
func (pself *resMgr) GetLoadMode() bool {
	retValue := CallResGetLoadMode()
	return ToBool(retValue)
}
func (pself *resMgr) GetBoundFromAlpha(p_path string) Rect2 {
	arg0Str := C.CString(p_path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	retValue := CallResGetBoundFromAlpha(arg0)
	return ToRect2(retValue)
}
func (pself *resMgr) GetImageSize(p_path string) Vec2 {
	arg0Str := C.CString(p_path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	retValue := CallResGetImageSize(arg0)
	return ToVec2(retValue)
}
func (pself *resMgr) ReadAllText(p_path string) string {
	arg0Str := C.CString(p_path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	retValue := CallResReadAllText(arg0)
	return ToString(retValue)
}
func (pself *resMgr) HasFile(p_path string) bool {
	arg0Str := C.CString(p_path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	retValue := CallResHasFile(arg0)
	return ToBool(retValue)
}
func (pself *resMgr) ReloadTexture(path string) {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	CallResReloadTexture(arg0)
}
func (pself *resMgr) FreeStr(str string) {
	arg0Str := C.CString(str)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	CallResFreeStr(arg0)
}
func (pself *sceneMgr) ChangeSceneToFile(path string) {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	CallSceneChangeSceneToFile(arg0)
}
func (pself *sceneMgr) DestroyAllSprites() {
	CallSceneDestroyAllSprites()
}
func (pself *sceneMgr) ReloadCurrentScene() int64 {
	retValue := CallSceneReloadCurrentScene()
	return ToInt64(retValue)
}
func (pself *sceneMgr) UnloadCurrentScene() {
	CallSceneUnloadCurrentScene()
}
func (pself *spriteMgr) SetDontDestroyOnLoad(obj Object) {
	arg0 := ToGdObj(obj)
	CallSpriteSetDontDestroyOnLoad(arg0)
}
func (pself *spriteMgr) SetProcess(obj Object, is_on bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(is_on)
	CallSpriteSetProcess(arg0, arg1)
}
func (pself *spriteMgr) SetPhysicProcess(obj Object, is_on bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(is_on)
	CallSpriteSetPhysicProcess(arg0, arg1)
}
func (pself *spriteMgr) SetTypeName(obj Object, type_name string) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(type_name)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	CallSpriteSetTypeName(arg0, arg1)
}
func (pself *spriteMgr) SetChildPosition(obj Object, path string, pos Vec2) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	arg2 := ToGdVec2(pos)
	CallSpriteSetChildPosition(arg0, arg1, arg2)
}
func (pself *spriteMgr) GetChildPosition(obj Object, path string) Vec2 {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	retValue := CallSpriteGetChildPosition(arg0, arg1)
	return ToVec2(retValue)
}
func (pself *spriteMgr) SetChildRotation(obj Object, path string, rot float64) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	arg2 := ToGdFloat(rot)
	CallSpriteSetChildRotation(arg0, arg1, arg2)
}
func (pself *spriteMgr) GetChildRotation(obj Object, path string) float64 {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	retValue := CallSpriteGetChildRotation(arg0, arg1)
	return ToFloat64(retValue)
}
func (pself *spriteMgr) SetChildScale(obj Object, path string, scale Vec2) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	arg2 := ToGdVec2(scale)
	CallSpriteSetChildScale(arg0, arg1, arg2)
}
func (pself *spriteMgr) GetChildScale(obj Object, path string) Vec2 {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	retValue := CallSpriteGetChildScale(arg0, arg1)
	return ToVec2(retValue)
}
func (pself *spriteMgr) CheckCollision(obj Object, target Object, is_src_trigger bool, is_dst_trigger bool) bool {
	arg0 := ToGdObj(obj)
	arg1 := ToGdObj(target)
	arg2 := ToGdBool(is_src_trigger)
	arg3 := ToGdBool(is_dst_trigger)
	retValue := CallSpriteCheckCollision(arg0, arg1, arg2, arg3)
	return ToBool(retValue)
}
func (pself *spriteMgr) CheckCollisionWithPoint(obj Object, point Vec2, is_trigger bool) bool {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(point)
	arg2 := ToGdBool(is_trigger)
	retValue := CallSpriteCheckCollisionWithPoint(arg0, arg1, arg2)
	return ToBool(retValue)
}
func (pself *spriteMgr) CreateBackdrop(path string) Object {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	retValue := CallSpriteCreateBackdrop(arg0)
	return ToObject(retValue)
}
func (pself *spriteMgr) CreateSprite(path string) Object {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	retValue := CallSpriteCreateSprite(arg0)
	return ToObject(retValue)
}
func (pself *spriteMgr) CloneSprite(obj Object) Object {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteCloneSprite(arg0)
	return ToObject(retValue)
}
func (pself *spriteMgr) DestroySprite(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteDestroySprite(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) IsSpriteAlive(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsSpriteAlive(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) SetPosition(obj Object, pos Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(pos)
	CallSpriteSetPosition(arg0, arg1)
}
func (pself *spriteMgr) GetPosition(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetPosition(arg0)
	return ToVec2(retValue)
}
func (pself *spriteMgr) SetRotation(obj Object, rot float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(rot)
	CallSpriteSetRotation(arg0, arg1)
}
func (pself *spriteMgr) GetRotation(obj Object) float64 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetRotation(arg0)
	return ToFloat64(retValue)
}
func (pself *spriteMgr) SetScale(obj Object, scale Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(scale)
	CallSpriteSetScale(arg0, arg1)
}
func (pself *spriteMgr) GetScale(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetScale(arg0)
	return ToVec2(retValue)
}
func (pself *spriteMgr) SetRenderScale(obj Object, scale Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(scale)
	CallSpriteSetRenderScale(arg0, arg1)
}
func (pself *spriteMgr) GetRenderScale(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetRenderScale(arg0)
	return ToVec2(retValue)
}
func (pself *spriteMgr) SetColor(obj Object, color Color) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdColor(color)
	CallSpriteSetColor(arg0, arg1)
}
func (pself *spriteMgr) GetColor(obj Object) Color {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetColor(arg0)
	return ToColor(retValue)
}
func (pself *spriteMgr) SetMaterialShader(obj Object, path string) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	CallSpriteSetMaterialShader(arg0, arg1)
}
func (pself *spriteMgr) GetMaterialShader(obj Object) string {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetMaterialShader(arg0)
	return ToString(retValue)
}
func (pself *spriteMgr) SetMaterialParams(obj Object, effect string, amount float64) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(effect)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	arg2 := ToGdFloat(amount)
	CallSpriteSetMaterialParams(arg0, arg1, arg2)
}
func (pself *spriteMgr) GetMaterialParams(obj Object, effect string) float64 {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(effect)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	retValue := CallSpriteGetMaterialParams(arg0, arg1)
	return ToFloat64(retValue)
}
func (pself *spriteMgr) SetMaterialParamsVec(obj Object, effect string, x float64, y float64, z float64, w float64) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(effect)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	arg2 := ToGdFloat(x)
	arg3 := ToGdFloat(y)
	arg4 := ToGdFloat(z)
	arg5 := ToGdFloat(w)
	CallSpriteSetMaterialParamsVec(arg0, arg1, arg2, arg3, arg4, arg5)
}
func (pself *spriteMgr) SetMaterialParamsVec4(obj Object, effect string, vec4 Vec4) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(effect)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	arg2 := ToGdVec4(vec4)
	CallSpriteSetMaterialParamsVec4(arg0, arg1, arg2)
}
func (pself *spriteMgr) GetMaterialParamsVec4(obj Object, effect string) Vec4 {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(effect)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	retValue := CallSpriteGetMaterialParamsVec4(arg0, arg1)
	return ToVec4(retValue)
}
func (pself *spriteMgr) SetMaterialParamsColor(obj Object, effect string, color Color) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(effect)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	arg2 := ToGdColor(color)
	CallSpriteSetMaterialParamsColor(arg0, arg1, arg2)
}
func (pself *spriteMgr) GetMaterialParamsColor(obj Object, effect string) Color {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(effect)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	retValue := CallSpriteGetMaterialParamsColor(arg0, arg1)
	return ToColor(retValue)
}
func (pself *spriteMgr) SetTextureAltas(obj Object, path string, rect2 Rect2) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	arg2 := ToGdRect2(rect2)
	CallSpriteSetTextureAltas(arg0, arg1, arg2)
}
func (pself *spriteMgr) SetTexture(obj Object, path string) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	CallSpriteSetTexture(arg0, arg1)
}
func (pself *spriteMgr) SetTextureAltasDirect(obj Object, path string, rect2 Rect2) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	arg2 := ToGdRect2(rect2)
	CallSpriteSetTextureAltasDirect(arg0, arg1, arg2)
}
func (pself *spriteMgr) SetTextureDirect(obj Object, path string) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	CallSpriteSetTextureDirect(arg0, arg1)
}
func (pself *spriteMgr) GetTexture(obj Object) string {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetTexture(arg0)
	return ToString(retValue)
}
func (pself *spriteMgr) SetVisible(obj Object, visible bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(visible)
	CallSpriteSetVisible(arg0, arg1)
}
func (pself *spriteMgr) GetVisible(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetVisible(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) GetZIndex(obj Object) int64 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetZIndex(arg0)
	return ToInt64(retValue)
}
func (pself *spriteMgr) SetZIndex(obj Object, z int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(z)
	CallSpriteSetZIndex(arg0, arg1)
}
func (pself *spriteMgr) PlayAnim(obj Object, p_name string, p_speed float64, isLoop bool, p_revert bool) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(p_name)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	arg2 := ToGdFloat(p_speed)
	arg3 := ToGdBool(isLoop)
	arg4 := ToGdBool(p_revert)
	CallSpritePlayAnim(arg0, arg1, arg2, arg3, arg4)
}
func (pself *spriteMgr) PlayBackwardsAnim(obj Object, p_name string) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(p_name)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	CallSpritePlayBackwardsAnim(arg0, arg1)
}
func (pself *spriteMgr) PauseAnim(obj Object) {
	arg0 := ToGdObj(obj)
	CallSpritePauseAnim(arg0)
}
func (pself *spriteMgr) StopAnim(obj Object) {
	arg0 := ToGdObj(obj)
	CallSpriteStopAnim(arg0)
}
func (pself *spriteMgr) IsPlayingAnim(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsPlayingAnim(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) SetAnim(obj Object, p_name string) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(p_name)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	CallSpriteSetAnim(arg0, arg1)
}
func (pself *spriteMgr) GetAnim(obj Object) string {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetAnim(arg0)
	return ToString(retValue)
}
func (pself *spriteMgr) SetAnimFrame(obj Object, p_frame int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(p_frame)
	CallSpriteSetAnimFrame(arg0, arg1)
}
func (pself *spriteMgr) GetAnimFrame(obj Object) int64 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetAnimFrame(arg0)
	return ToInt64(retValue)
}
func (pself *spriteMgr) SetAnimSpeedScale(obj Object, p_speed_scale float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(p_speed_scale)
	CallSpriteSetAnimSpeedScale(arg0, arg1)
}
func (pself *spriteMgr) GetAnimSpeedScale(obj Object) float64 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetAnimSpeedScale(arg0)
	return ToFloat64(retValue)
}
func (pself *spriteMgr) GetAnimPlayingSpeed(obj Object) float64 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetAnimPlayingSpeed(arg0)
	return ToFloat64(retValue)
}
func (pself *spriteMgr) SetAnimCentered(obj Object, p_center bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(p_center)
	CallSpriteSetAnimCentered(arg0, arg1)
}
func (pself *spriteMgr) IsAnimCentered(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsAnimCentered(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) SetAnimOffset(obj Object, p_offset Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(p_offset)
	CallSpriteSetAnimOffset(arg0, arg1)
}
func (pself *spriteMgr) GetAnimOffset(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetAnimOffset(arg0)
	return ToVec2(retValue)
}
func (pself *spriteMgr) SetAnimFlipH(obj Object, p_flip bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(p_flip)
	CallSpriteSetAnimFlipH(arg0, arg1)
}
func (pself *spriteMgr) IsAnimFlippedH(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsAnimFlippedH(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) SetAnimFlipV(obj Object, p_flip bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(p_flip)
	CallSpriteSetAnimFlipV(arg0, arg1)
}
func (pself *spriteMgr) IsAnimFlippedV(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsAnimFlippedV(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) SetVelocity(obj Object, velocity Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(velocity)
	CallSpriteSetVelocity(arg0, arg1)
}
func (pself *spriteMgr) GetVelocity(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetVelocity(arg0)
	return ToVec2(retValue)
}
func (pself *spriteMgr) IsOnFloor(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsOnFloor(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) IsOnFloorOnly(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsOnFloorOnly(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) IsOnWall(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsOnWall(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) IsOnWallOnly(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsOnWallOnly(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) IsOnCeiling(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsOnCeiling(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) IsOnCeilingOnly(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsOnCeilingOnly(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) GetLastMotion(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetLastMotion(arg0)
	return ToVec2(retValue)
}
func (pself *spriteMgr) GetPositionDelta(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetPositionDelta(arg0)
	return ToVec2(retValue)
}
func (pself *spriteMgr) GetFloorNormal(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetFloorNormal(arg0)
	return ToVec2(retValue)
}
func (pself *spriteMgr) GetWallNormal(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetWallNormal(arg0)
	return ToVec2(retValue)
}
func (pself *spriteMgr) GetRealVelocity(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetRealVelocity(arg0)
	return ToVec2(retValue)
}
func (pself *spriteMgr) MoveAndSlide(obj Object) {
	arg0 := ToGdObj(obj)
	CallSpriteMoveAndSlide(arg0)
}
func (pself *spriteMgr) SetGravity(obj Object, gravity float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(gravity)
	CallSpriteSetGravity(arg0, arg1)
}
func (pself *spriteMgr) GetGravity(obj Object) float64 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetGravity(arg0)
	return ToFloat64(retValue)
}
func (pself *spriteMgr) SetMass(obj Object, mass float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(mass)
	CallSpriteSetMass(arg0, arg1)
}
func (pself *spriteMgr) GetMass(obj Object) float64 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetMass(arg0)
	return ToFloat64(retValue)
}
func (pself *spriteMgr) AddForce(obj Object, force Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(force)
	CallSpriteAddForce(arg0, arg1)
}
func (pself *spriteMgr) AddImpulse(obj Object, impulse Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(impulse)
	CallSpriteAddImpulse(arg0, arg1)
}
func (pself *spriteMgr) SetCollisionLayer(obj Object, layer int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(layer)
	CallSpriteSetCollisionLayer(arg0, arg1)
}
func (pself *spriteMgr) GetCollisionLayer(obj Object) int64 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetCollisionLayer(arg0)
	return ToInt64(retValue)
}
func (pself *spriteMgr) SetCollisionMask(obj Object, mask int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(mask)
	CallSpriteSetCollisionMask(arg0, arg1)
}
func (pself *spriteMgr) GetCollisionMask(obj Object) int64 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetCollisionMask(arg0)
	return ToInt64(retValue)
}
func (pself *spriteMgr) SetTriggerLayer(obj Object, layer int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(layer)
	CallSpriteSetTriggerLayer(arg0, arg1)
}
func (pself *spriteMgr) GetTriggerLayer(obj Object) int64 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetTriggerLayer(arg0)
	return ToInt64(retValue)
}
func (pself *spriteMgr) SetTriggerMask(obj Object, mask int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(mask)
	CallSpriteSetTriggerMask(arg0, arg1)
}
func (pself *spriteMgr) GetTriggerMask(obj Object) int64 {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetTriggerMask(arg0)
	return ToInt64(retValue)
}
func (pself *spriteMgr) SetColliderRect(obj Object, center Vec2, size Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(center)
	arg2 := ToGdVec2(size)
	CallSpriteSetColliderRect(arg0, arg1, arg2)
}
func (pself *spriteMgr) SetColliderCircle(obj Object, center Vec2, radius float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(center)
	arg2 := ToGdFloat(radius)
	CallSpriteSetColliderCircle(arg0, arg1, arg2)
}
func (pself *spriteMgr) SetColliderCapsule(obj Object, center Vec2, size Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(center)
	arg2 := ToGdVec2(size)
	CallSpriteSetColliderCapsule(arg0, arg1, arg2)
}
func (pself *spriteMgr) SetCollisionEnabled(obj Object, enabled bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(enabled)
	CallSpriteSetCollisionEnabled(arg0, arg1)
}
func (pself *spriteMgr) IsCollisionEnabled(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsCollisionEnabled(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) SetTriggerRect(obj Object, center Vec2, size Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(center)
	arg2 := ToGdVec2(size)
	CallSpriteSetTriggerRect(arg0, arg1, arg2)
}
func (pself *spriteMgr) SetTriggerCircle(obj Object, center Vec2, radius float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(center)
	arg2 := ToGdFloat(radius)
	CallSpriteSetTriggerCircle(arg0, arg1, arg2)
}
func (pself *spriteMgr) SetTriggerCapsule(obj Object, center Vec2, size Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(center)
	arg2 := ToGdVec2(size)
	CallSpriteSetTriggerCapsule(arg0, arg1, arg2)
}
func (pself *spriteMgr) SetTriggerEnabled(obj Object, trigger bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(trigger)
	CallSpriteSetTriggerEnabled(arg0, arg1)
}
func (pself *spriteMgr) IsTriggerEnabled(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsTriggerEnabled(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) CheckCollisionByColor(obj Object, color Color, color_threshold float64, alpha_threshold float64) bool {
	arg0 := ToGdObj(obj)
	arg1 := ToGdColor(color)
	arg2 := ToGdFloat(color_threshold)
	arg3 := ToGdFloat(alpha_threshold)
	retValue := CallSpriteCheckCollisionByColor(arg0, arg1, arg2, arg3)
	return ToBool(retValue)
}
func (pself *spriteMgr) CheckCollisionByAlpha(obj Object, alpha_threshold float64) bool {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(alpha_threshold)
	retValue := CallSpriteCheckCollisionByAlpha(arg0, arg1)
	return ToBool(retValue)
}
func (pself *spriteMgr) CheckCollisionWithSpriteByAlpha(obj Object, obj_b Object, alpha_threshold float64) bool {
	arg0 := ToGdObj(obj)
	arg1 := ToGdObj(obj_b)
	arg2 := ToGdFloat(alpha_threshold)
	retValue := CallSpriteCheckCollisionWithSpriteByAlpha(arg0, arg1, arg2)
	return ToBool(retValue)
}
func (pself *uiMgr) BindNode(obj Object, rel_path string) Object {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(rel_path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	retValue := CallUiBindNode(arg0, arg1)
	return ToObject(retValue)
}
func (pself *uiMgr) CreateNode(path string) Object {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	retValue := CallUiCreateNode(arg0)
	return ToObject(retValue)
}
func (pself *uiMgr) CreateButton(path string, text string) Object {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	arg1Str := C.CString(text)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	retValue := CallUiCreateButton(arg0, arg1)
	return ToObject(retValue)
}
func (pself *uiMgr) CreateLabel(path string, text string) Object {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	arg1Str := C.CString(text)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	retValue := CallUiCreateLabel(arg0, arg1)
	return ToObject(retValue)
}
func (pself *uiMgr) CreateImage(path string) Object {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	retValue := CallUiCreateImage(arg0)
	return ToObject(retValue)
}
func (pself *uiMgr) CreateToggle(path string, value bool) Object {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	arg1 := ToGdBool(value)
	retValue := CallUiCreateToggle(arg0, arg1)
	return ToObject(retValue)
}
func (pself *uiMgr) CreateSlider(path string, value float64) Object {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	arg1 := ToGdFloat(value)
	retValue := CallUiCreateSlider(arg0, arg1)
	return ToObject(retValue)
}
func (pself *uiMgr) CreateInput(path string, text string) Object {
	arg0Str := C.CString(path)
	arg0 := (GdString)(arg0Str)
	defer C.free(unsafe.Pointer(arg0Str))
	arg1Str := C.CString(text)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	retValue := CallUiCreateInput(arg0, arg1)
	return ToObject(retValue)
}
func (pself *uiMgr) DestroyNode(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallUiDestroyNode(arg0)
	return ToBool(retValue)
}
func (pself *uiMgr) GetType(obj Object) int64 {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetType(arg0)
	return ToInt64(retValue)
}
func (pself *uiMgr) SetText(obj Object, text string) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(text)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	CallUiSetText(arg0, arg1)
}
func (pself *uiMgr) GetText(obj Object) string {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetText(arg0)
	return ToString(retValue)
}
func (pself *uiMgr) SetTexture(obj Object, path string) {
	arg0 := ToGdObj(obj)
	arg1Str := C.CString(path)
	arg1 := (GdString)(arg1Str)
	defer C.free(unsafe.Pointer(arg1Str))
	CallUiSetTexture(arg0, arg1)
}
func (pself *uiMgr) GetTexture(obj Object) string {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetTexture(arg0)
	return ToString(retValue)
}
func (pself *uiMgr) SetColor(obj Object, color Color) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdColor(color)
	CallUiSetColor(arg0, arg1)
}
func (pself *uiMgr) GetColor(obj Object) Color {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetColor(arg0)
	return ToColor(retValue)
}
func (pself *uiMgr) SetFontSize(obj Object, size int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(size)
	CallUiSetFontSize(arg0, arg1)
}
func (pself *uiMgr) GetFontSize(obj Object) int64 {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetFontSize(arg0)
	return ToInt64(retValue)
}
func (pself *uiMgr) SetVisible(obj Object, visible bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(visible)
	CallUiSetVisible(arg0, arg1)
}
func (pself *uiMgr) GetVisible(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetVisible(arg0)
	return ToBool(retValue)
}
func (pself *uiMgr) SetInteractable(obj Object, interactable bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(interactable)
	CallUiSetInteractable(arg0, arg1)
}
func (pself *uiMgr) GetInteractable(obj Object) bool {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetInteractable(arg0)
	return ToBool(retValue)
}
func (pself *uiMgr) SetRect(obj Object, rect Rect2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdRect2(rect)
	CallUiSetRect(arg0, arg1)
}
func (pself *uiMgr) GetRect(obj Object) Rect2 {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetRect(arg0)
	return ToRect2(retValue)
}
func (pself *uiMgr) GetLayoutDirection(obj Object) int64 {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetLayoutDirection(arg0)
	return ToInt64(retValue)
}
func (pself *uiMgr) SetLayoutDirection(obj Object, value int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(value)
	CallUiSetLayoutDirection(arg0, arg1)
}
func (pself *uiMgr) GetLayoutMode(obj Object) int64 {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetLayoutMode(arg0)
	return ToInt64(retValue)
}
func (pself *uiMgr) SetLayoutMode(obj Object, value int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(value)
	CallUiSetLayoutMode(arg0, arg1)
}
func (pself *uiMgr) GetAnchorsPreset(obj Object) int64 {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetAnchorsPreset(arg0)
	return ToInt64(retValue)
}
func (pself *uiMgr) SetAnchorsPreset(obj Object, value int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(value)
	CallUiSetAnchorsPreset(arg0, arg1)
}
func (pself *uiMgr) GetScale(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetScale(arg0)
	return ToVec2(retValue)
}
func (pself *uiMgr) SetScale(obj Object, value Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(value)
	CallUiSetScale(arg0, arg1)
}
func (pself *uiMgr) GetPosition(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetPosition(arg0)
	return ToVec2(retValue)
}
func (pself *uiMgr) SetPosition(obj Object, value Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(value)
	CallUiSetPosition(arg0, arg1)
}
func (pself *uiMgr) GetSize(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetSize(arg0)
	return ToVec2(retValue)
}
func (pself *uiMgr) SetSize(obj Object, value Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(value)
	CallUiSetSize(arg0, arg1)
}
func (pself *uiMgr) GetGlobalPosition(obj Object) Vec2 {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetGlobalPosition(arg0)
	return ToVec2(retValue)
}
func (pself *uiMgr) SetGlobalPosition(obj Object, value Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(value)
	CallUiSetGlobalPosition(arg0, arg1)
}
func (pself *uiMgr) GetRotation(obj Object) float64 {
	arg0 := ToGdObj(obj)
	retValue := CallUiGetRotation(arg0)
	return ToFloat64(retValue)
}
func (pself *uiMgr) SetRotation(obj Object, value float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(value)
	CallUiSetRotation(arg0, arg1)
}
func (pself *uiMgr) GetFlip(obj Object, horizontal bool) bool {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(horizontal)
	retValue := CallUiGetFlip(arg0, arg1)
	return ToBool(retValue)
}
func (pself *uiMgr) SetFlip(obj Object, horizontal bool, is_flip bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(horizontal)
	arg2 := ToGdBool(is_flip)
	CallUiSetFlip(arg0, arg1, arg2)
}
