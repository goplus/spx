/*
------------------------------------------------------------------------------
//   This code was generated by template ffi_wrapper.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_wrapper.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------
*/
package ffi

//revive:disable

// #include "gdextension_spx_codegen_header.h"
// #include "ffi_wrapper.gen.h"
// #include <stdint.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"

// C type aliases
// enums

// C function aliases
type GDExtensionSpxGlobalRegisterCallbacks C.GDExtensionSpxGlobalRegisterCallbacks
type GDExtensionSpxStringNewWithLatin1Chars C.GDExtensionSpxStringNewWithLatin1Chars
type GDExtensionSpxStringNewWithUtf8Chars C.GDExtensionSpxStringNewWithUtf8Chars
type GDExtensionSpxStringNewWithLatin1CharsAndLen C.GDExtensionSpxStringNewWithLatin1CharsAndLen
type GDExtensionSpxStringNewWithUtf8CharsAndLen C.GDExtensionSpxStringNewWithUtf8CharsAndLen
type GDExtensionSpxStringToLatin1Chars C.GDExtensionSpxStringToLatin1Chars
type GDExtensionSpxStringToUtf8Chars C.GDExtensionSpxStringToUtf8Chars
type GDExtensionSpxVariantGetPtrConstructor C.GDExtensionSpxVariantGetPtrConstructor
type GDExtensionSpxVariantGetPtrDestructor C.GDExtensionSpxVariantGetPtrDestructor
type GDExtensionSpxCallbackOnEngineStart C.GDExtensionSpxCallbackOnEngineStart
type GDExtensionSpxCallbackOnEngineUpdate C.GDExtensionSpxCallbackOnEngineUpdate
type GDExtensionSpxCallbackOnEngineFixedUpdate C.GDExtensionSpxCallbackOnEngineFixedUpdate
type GDExtensionSpxCallbackOnEngineDestroy C.GDExtensionSpxCallbackOnEngineDestroy
type GDExtensionSpxCallbackOnSceneSpriteInstantiated C.GDExtensionSpxCallbackOnSceneSpriteInstantiated
type GDExtensionSpxCallbackOnSpriteReady C.GDExtensionSpxCallbackOnSpriteReady
type GDExtensionSpxCallbackOnSpriteUpdated C.GDExtensionSpxCallbackOnSpriteUpdated
type GDExtensionSpxCallbackOnSpriteFixedUpdated C.GDExtensionSpxCallbackOnSpriteFixedUpdated
type GDExtensionSpxCallbackOnSpriteDestroyed C.GDExtensionSpxCallbackOnSpriteDestroyed
type GDExtensionSpxCallbackOnSpriteFramesSetChanged C.GDExtensionSpxCallbackOnSpriteFramesSetChanged
type GDExtensionSpxCallbackOnSpriteAnimationChanged C.GDExtensionSpxCallbackOnSpriteAnimationChanged
type GDExtensionSpxCallbackOnSpriteFrameChanged C.GDExtensionSpxCallbackOnSpriteFrameChanged
type GDExtensionSpxCallbackOnSpriteAnimationLooped C.GDExtensionSpxCallbackOnSpriteAnimationLooped
type GDExtensionSpxCallbackOnSpriteAnimationFinished C.GDExtensionSpxCallbackOnSpriteAnimationFinished
type GDExtensionSpxCallbackOnSpriteVfxFinished C.GDExtensionSpxCallbackOnSpriteVfxFinished
type GDExtensionSpxCallbackOnSpriteScreenExited C.GDExtensionSpxCallbackOnSpriteScreenExited
type GDExtensionSpxCallbackOnSpriteScreenEntered C.GDExtensionSpxCallbackOnSpriteScreenEntered
type GDExtensionSpxCallbackOnMousePressed C.GDExtensionSpxCallbackOnMousePressed
type GDExtensionSpxCallbackOnMouseReleased C.GDExtensionSpxCallbackOnMouseReleased
type GDExtensionSpxCallbackOnKeyPressed C.GDExtensionSpxCallbackOnKeyPressed
type GDExtensionSpxCallbackOnKeyReleased C.GDExtensionSpxCallbackOnKeyReleased
type GDExtensionSpxCallbackOnActionPressed C.GDExtensionSpxCallbackOnActionPressed
type GDExtensionSpxCallbackOnActionJustPressed C.GDExtensionSpxCallbackOnActionJustPressed
type GDExtensionSpxCallbackOnActionJustReleased C.GDExtensionSpxCallbackOnActionJustReleased
type GDExtensionSpxCallbackOnAxisChanged C.GDExtensionSpxCallbackOnAxisChanged
type GDExtensionSpxCallbackOnCollisionEnter C.GDExtensionSpxCallbackOnCollisionEnter
type GDExtensionSpxCallbackOnCollisionStay C.GDExtensionSpxCallbackOnCollisionStay
type GDExtensionSpxCallbackOnCollisionExit C.GDExtensionSpxCallbackOnCollisionExit
type GDExtensionSpxCallbackOnTriggerEnter C.GDExtensionSpxCallbackOnTriggerEnter
type GDExtensionSpxCallbackOnTriggerStay C.GDExtensionSpxCallbackOnTriggerStay
type GDExtensionSpxCallbackOnTriggerExit C.GDExtensionSpxCallbackOnTriggerExit
type GDExtensionSpxCallbackOnUiReady C.GDExtensionSpxCallbackOnUiReady
type GDExtensionSpxCallbackOnUiUpdated C.GDExtensionSpxCallbackOnUiUpdated
type GDExtensionSpxCallbackOnUiDestroyed C.GDExtensionSpxCallbackOnUiDestroyed
type GDExtensionSpxCallbackOnUiPressed C.GDExtensionSpxCallbackOnUiPressed
type GDExtensionSpxCallbackOnUiReleased C.GDExtensionSpxCallbackOnUiReleased
type GDExtensionSpxCallbackOnUiHovered C.GDExtensionSpxCallbackOnUiHovered
type GDExtensionSpxCallbackOnUiClicked C.GDExtensionSpxCallbackOnUiClicked
type GDExtensionSpxCallbackOnUiToggle C.GDExtensionSpxCallbackOnUiToggle
type GDExtensionSpxCallbackOnUiTextChanged C.GDExtensionSpxCallbackOnUiTextChanged
type GDExtensionSpxAudioStopAll C.GDExtensionSpxAudioStopAll
type GDExtensionSpxAudioCreateAudio C.GDExtensionSpxAudioCreateAudio
type GDExtensionSpxAudioDestroyAudio C.GDExtensionSpxAudioDestroyAudio
type GDExtensionSpxAudioSetPitch C.GDExtensionSpxAudioSetPitch
type GDExtensionSpxAudioGetPitch C.GDExtensionSpxAudioGetPitch
type GDExtensionSpxAudioSetPan C.GDExtensionSpxAudioSetPan
type GDExtensionSpxAudioGetPan C.GDExtensionSpxAudioGetPan
type GDExtensionSpxAudioPlay C.GDExtensionSpxAudioPlay
type GDExtensionSpxAudioPause C.GDExtensionSpxAudioPause
type GDExtensionSpxAudioResume C.GDExtensionSpxAudioResume
type GDExtensionSpxAudioStop C.GDExtensionSpxAudioStop
type GDExtensionSpxAudioSetLoop C.GDExtensionSpxAudioSetLoop
type GDExtensionSpxAudioGetLoop C.GDExtensionSpxAudioGetLoop
type GDExtensionSpxAudioGetTimer C.GDExtensionSpxAudioGetTimer
type GDExtensionSpxAudioSetTimer C.GDExtensionSpxAudioSetTimer
type GDExtensionSpxAudioIsPlaying C.GDExtensionSpxAudioIsPlaying
type GDExtensionSpxAudioSetVolume C.GDExtensionSpxAudioSetVolume
type GDExtensionSpxAudioGetVolume C.GDExtensionSpxAudioGetVolume
type GDExtensionSpxCameraGetCameraPosition C.GDExtensionSpxCameraGetCameraPosition
type GDExtensionSpxCameraSetCameraPosition C.GDExtensionSpxCameraSetCameraPosition
type GDExtensionSpxCameraGetCameraZoom C.GDExtensionSpxCameraGetCameraZoom
type GDExtensionSpxCameraSetCameraZoom C.GDExtensionSpxCameraSetCameraZoom
type GDExtensionSpxCameraGetViewportRect C.GDExtensionSpxCameraGetViewportRect
type GDExtensionSpxExtDestroyAllPens C.GDExtensionSpxExtDestroyAllPens
type GDExtensionSpxExtCreatePen C.GDExtensionSpxExtCreatePen
type GDExtensionSpxExtDestroyPen C.GDExtensionSpxExtDestroyPen
type GDExtensionSpxExtPenStamp C.GDExtensionSpxExtPenStamp
type GDExtensionSpxExtMovePenTo C.GDExtensionSpxExtMovePenTo
type GDExtensionSpxExtPenDown C.GDExtensionSpxExtPenDown
type GDExtensionSpxExtPenUp C.GDExtensionSpxExtPenUp
type GDExtensionSpxExtSetPenColorTo C.GDExtensionSpxExtSetPenColorTo
type GDExtensionSpxExtChangePenBy C.GDExtensionSpxExtChangePenBy
type GDExtensionSpxExtSetPenTo C.GDExtensionSpxExtSetPenTo
type GDExtensionSpxExtChangePenSizeBy C.GDExtensionSpxExtChangePenSizeBy
type GDExtensionSpxExtSetPenSizeTo C.GDExtensionSpxExtSetPenSizeTo
type GDExtensionSpxExtSetPenStampTexture C.GDExtensionSpxExtSetPenStampTexture
type GDExtensionSpxInputGetMousePos C.GDExtensionSpxInputGetMousePos
type GDExtensionSpxInputGetKey C.GDExtensionSpxInputGetKey
type GDExtensionSpxInputGetMouseState C.GDExtensionSpxInputGetMouseState
type GDExtensionSpxInputGetKeyState C.GDExtensionSpxInputGetKeyState
type GDExtensionSpxInputGetAxis C.GDExtensionSpxInputGetAxis
type GDExtensionSpxInputIsActionPressed C.GDExtensionSpxInputIsActionPressed
type GDExtensionSpxInputIsActionJustPressed C.GDExtensionSpxInputIsActionJustPressed
type GDExtensionSpxInputIsActionJustReleased C.GDExtensionSpxInputIsActionJustReleased
type GDExtensionSpxPhysicRaycast C.GDExtensionSpxPhysicRaycast
type GDExtensionSpxPhysicCheckCollision C.GDExtensionSpxPhysicCheckCollision
type GDExtensionSpxPhysicCheckTouchedCameraBoundary C.GDExtensionSpxPhysicCheckTouchedCameraBoundary
type GDExtensionSpxPhysicSetCollisionSystemType C.GDExtensionSpxPhysicSetCollisionSystemType
type GDExtensionSpxPlatformSetWindowPosition C.GDExtensionSpxPlatformSetWindowPosition
type GDExtensionSpxPlatformGetWindowPosition C.GDExtensionSpxPlatformGetWindowPosition
type GDExtensionSpxPlatformSetWindowSize C.GDExtensionSpxPlatformSetWindowSize
type GDExtensionSpxPlatformGetWindowSize C.GDExtensionSpxPlatformGetWindowSize
type GDExtensionSpxPlatformSetWindowTitle C.GDExtensionSpxPlatformSetWindowTitle
type GDExtensionSpxPlatformGetWindowTitle C.GDExtensionSpxPlatformGetWindowTitle
type GDExtensionSpxPlatformSetWindowFullscreen C.GDExtensionSpxPlatformSetWindowFullscreen
type GDExtensionSpxPlatformIsWindowFullscreen C.GDExtensionSpxPlatformIsWindowFullscreen
type GDExtensionSpxPlatformSetDebugMode C.GDExtensionSpxPlatformSetDebugMode
type GDExtensionSpxPlatformIsDebugMode C.GDExtensionSpxPlatformIsDebugMode
type GDExtensionSpxPlatformGetTimeScale C.GDExtensionSpxPlatformGetTimeScale
type GDExtensionSpxPlatformSetTimeScale C.GDExtensionSpxPlatformSetTimeScale
type GDExtensionSpxPlatformGetPersistantDataDir C.GDExtensionSpxPlatformGetPersistantDataDir
type GDExtensionSpxPlatformSetPersistantDataDir C.GDExtensionSpxPlatformSetPersistantDataDir
type GDExtensionSpxPlatformIsInPersistantDataDir C.GDExtensionSpxPlatformIsInPersistantDataDir
type GDExtensionSpxResCreateAnimation C.GDExtensionSpxResCreateAnimation
type GDExtensionSpxResSetLoadMode C.GDExtensionSpxResSetLoadMode
type GDExtensionSpxResGetLoadMode C.GDExtensionSpxResGetLoadMode
type GDExtensionSpxResGetBoundFromAlpha C.GDExtensionSpxResGetBoundFromAlpha
type GDExtensionSpxResGetImageSize C.GDExtensionSpxResGetImageSize
type GDExtensionSpxResReadAllText C.GDExtensionSpxResReadAllText
type GDExtensionSpxResHasFile C.GDExtensionSpxResHasFile
type GDExtensionSpxResReloadTexture C.GDExtensionSpxResReloadTexture
type GDExtensionSpxSceneChangeSceneToFile C.GDExtensionSpxSceneChangeSceneToFile
type GDExtensionSpxSceneDestroyAllSprites C.GDExtensionSpxSceneDestroyAllSprites
type GDExtensionSpxSceneReloadCurrentScene C.GDExtensionSpxSceneReloadCurrentScene
type GDExtensionSpxSceneUnloadCurrentScene C.GDExtensionSpxSceneUnloadCurrentScene
type GDExtensionSpxSpriteSetDontDestroyOnLoad C.GDExtensionSpxSpriteSetDontDestroyOnLoad
type GDExtensionSpxSpriteSetProcess C.GDExtensionSpxSpriteSetProcess
type GDExtensionSpxSpriteSetPhysicProcess C.GDExtensionSpxSpriteSetPhysicProcess
type GDExtensionSpxSpriteSetTypeName C.GDExtensionSpxSpriteSetTypeName
type GDExtensionSpxSpriteSetChildPosition C.GDExtensionSpxSpriteSetChildPosition
type GDExtensionSpxSpriteGetChildPosition C.GDExtensionSpxSpriteGetChildPosition
type GDExtensionSpxSpriteSetChildRotation C.GDExtensionSpxSpriteSetChildRotation
type GDExtensionSpxSpriteGetChildRotation C.GDExtensionSpxSpriteGetChildRotation
type GDExtensionSpxSpriteSetChildScale C.GDExtensionSpxSpriteSetChildScale
type GDExtensionSpxSpriteGetChildScale C.GDExtensionSpxSpriteGetChildScale
type GDExtensionSpxSpriteCheckCollision C.GDExtensionSpxSpriteCheckCollision
type GDExtensionSpxSpriteCheckCollisionWithPoint C.GDExtensionSpxSpriteCheckCollisionWithPoint
type GDExtensionSpxSpriteCreateBackdrop C.GDExtensionSpxSpriteCreateBackdrop
type GDExtensionSpxSpriteCreateSprite C.GDExtensionSpxSpriteCreateSprite
type GDExtensionSpxSpriteCloneSprite C.GDExtensionSpxSpriteCloneSprite
type GDExtensionSpxSpriteDestroySprite C.GDExtensionSpxSpriteDestroySprite
type GDExtensionSpxSpriteIsSpriteAlive C.GDExtensionSpxSpriteIsSpriteAlive
type GDExtensionSpxSpriteSetPosition C.GDExtensionSpxSpriteSetPosition
type GDExtensionSpxSpriteGetPosition C.GDExtensionSpxSpriteGetPosition
type GDExtensionSpxSpriteSetRotation C.GDExtensionSpxSpriteSetRotation
type GDExtensionSpxSpriteGetRotation C.GDExtensionSpxSpriteGetRotation
type GDExtensionSpxSpriteSetScale C.GDExtensionSpxSpriteSetScale
type GDExtensionSpxSpriteGetScale C.GDExtensionSpxSpriteGetScale
type GDExtensionSpxSpriteSetRenderScale C.GDExtensionSpxSpriteSetRenderScale
type GDExtensionSpxSpriteGetRenderScale C.GDExtensionSpxSpriteGetRenderScale
type GDExtensionSpxSpriteSetColor C.GDExtensionSpxSpriteSetColor
type GDExtensionSpxSpriteGetColor C.GDExtensionSpxSpriteGetColor
type GDExtensionSpxSpriteSetMaterialShader C.GDExtensionSpxSpriteSetMaterialShader
type GDExtensionSpxSpriteGetMaterialShader C.GDExtensionSpxSpriteGetMaterialShader
type GDExtensionSpxSpriteSetMaterialParams C.GDExtensionSpxSpriteSetMaterialParams
type GDExtensionSpxSpriteGetMaterialParams C.GDExtensionSpxSpriteGetMaterialParams
type GDExtensionSpxSpriteSetTextureAltas C.GDExtensionSpxSpriteSetTextureAltas
type GDExtensionSpxSpriteSetTexture C.GDExtensionSpxSpriteSetTexture
type GDExtensionSpxSpriteSetTextureAltasDirect C.GDExtensionSpxSpriteSetTextureAltasDirect
type GDExtensionSpxSpriteSetTextureDirect C.GDExtensionSpxSpriteSetTextureDirect
type GDExtensionSpxSpriteGetTexture C.GDExtensionSpxSpriteGetTexture
type GDExtensionSpxSpriteSetVisible C.GDExtensionSpxSpriteSetVisible
type GDExtensionSpxSpriteGetVisible C.GDExtensionSpxSpriteGetVisible
type GDExtensionSpxSpriteGetZIndex C.GDExtensionSpxSpriteGetZIndex
type GDExtensionSpxSpriteSetZIndex C.GDExtensionSpxSpriteSetZIndex
type GDExtensionSpxSpritePlayAnim C.GDExtensionSpxSpritePlayAnim
type GDExtensionSpxSpritePlayBackwardsAnim C.GDExtensionSpxSpritePlayBackwardsAnim
type GDExtensionSpxSpritePauseAnim C.GDExtensionSpxSpritePauseAnim
type GDExtensionSpxSpriteStopAnim C.GDExtensionSpxSpriteStopAnim
type GDExtensionSpxSpriteIsPlayingAnim C.GDExtensionSpxSpriteIsPlayingAnim
type GDExtensionSpxSpriteSetAnim C.GDExtensionSpxSpriteSetAnim
type GDExtensionSpxSpriteGetAnim C.GDExtensionSpxSpriteGetAnim
type GDExtensionSpxSpriteSetAnimFrame C.GDExtensionSpxSpriteSetAnimFrame
type GDExtensionSpxSpriteGetAnimFrame C.GDExtensionSpxSpriteGetAnimFrame
type GDExtensionSpxSpriteSetAnimSpeedScale C.GDExtensionSpxSpriteSetAnimSpeedScale
type GDExtensionSpxSpriteGetAnimSpeedScale C.GDExtensionSpxSpriteGetAnimSpeedScale
type GDExtensionSpxSpriteGetAnimPlayingSpeed C.GDExtensionSpxSpriteGetAnimPlayingSpeed
type GDExtensionSpxSpriteSetAnimCentered C.GDExtensionSpxSpriteSetAnimCentered
type GDExtensionSpxSpriteIsAnimCentered C.GDExtensionSpxSpriteIsAnimCentered
type GDExtensionSpxSpriteSetAnimOffset C.GDExtensionSpxSpriteSetAnimOffset
type GDExtensionSpxSpriteGetAnimOffset C.GDExtensionSpxSpriteGetAnimOffset
type GDExtensionSpxSpriteSetAnimFlipH C.GDExtensionSpxSpriteSetAnimFlipH
type GDExtensionSpxSpriteIsAnimFlippedH C.GDExtensionSpxSpriteIsAnimFlippedH
type GDExtensionSpxSpriteSetAnimFlipV C.GDExtensionSpxSpriteSetAnimFlipV
type GDExtensionSpxSpriteIsAnimFlippedV C.GDExtensionSpxSpriteIsAnimFlippedV
type GDExtensionSpxSpriteSetVelocity C.GDExtensionSpxSpriteSetVelocity
type GDExtensionSpxSpriteGetVelocity C.GDExtensionSpxSpriteGetVelocity
type GDExtensionSpxSpriteIsOnFloor C.GDExtensionSpxSpriteIsOnFloor
type GDExtensionSpxSpriteIsOnFloorOnly C.GDExtensionSpxSpriteIsOnFloorOnly
type GDExtensionSpxSpriteIsOnWall C.GDExtensionSpxSpriteIsOnWall
type GDExtensionSpxSpriteIsOnWallOnly C.GDExtensionSpxSpriteIsOnWallOnly
type GDExtensionSpxSpriteIsOnCeiling C.GDExtensionSpxSpriteIsOnCeiling
type GDExtensionSpxSpriteIsOnCeilingOnly C.GDExtensionSpxSpriteIsOnCeilingOnly
type GDExtensionSpxSpriteGetLastMotion C.GDExtensionSpxSpriteGetLastMotion
type GDExtensionSpxSpriteGetPositionDelta C.GDExtensionSpxSpriteGetPositionDelta
type GDExtensionSpxSpriteGetFloorNormal C.GDExtensionSpxSpriteGetFloorNormal
type GDExtensionSpxSpriteGetWallNormal C.GDExtensionSpxSpriteGetWallNormal
type GDExtensionSpxSpriteGetRealVelocity C.GDExtensionSpxSpriteGetRealVelocity
type GDExtensionSpxSpriteMoveAndSlide C.GDExtensionSpxSpriteMoveAndSlide
type GDExtensionSpxSpriteSetGravity C.GDExtensionSpxSpriteSetGravity
type GDExtensionSpxSpriteGetGravity C.GDExtensionSpxSpriteGetGravity
type GDExtensionSpxSpriteSetMass C.GDExtensionSpxSpriteSetMass
type GDExtensionSpxSpriteGetMass C.GDExtensionSpxSpriteGetMass
type GDExtensionSpxSpriteAddForce C.GDExtensionSpxSpriteAddForce
type GDExtensionSpxSpriteAddImpulse C.GDExtensionSpxSpriteAddImpulse
type GDExtensionSpxSpriteSetCollisionLayer C.GDExtensionSpxSpriteSetCollisionLayer
type GDExtensionSpxSpriteGetCollisionLayer C.GDExtensionSpxSpriteGetCollisionLayer
type GDExtensionSpxSpriteSetCollisionMask C.GDExtensionSpxSpriteSetCollisionMask
type GDExtensionSpxSpriteGetCollisionMask C.GDExtensionSpxSpriteGetCollisionMask
type GDExtensionSpxSpriteSetTriggerLayer C.GDExtensionSpxSpriteSetTriggerLayer
type GDExtensionSpxSpriteGetTriggerLayer C.GDExtensionSpxSpriteGetTriggerLayer
type GDExtensionSpxSpriteSetTriggerMask C.GDExtensionSpxSpriteSetTriggerMask
type GDExtensionSpxSpriteGetTriggerMask C.GDExtensionSpxSpriteGetTriggerMask
type GDExtensionSpxSpriteSetColliderRect C.GDExtensionSpxSpriteSetColliderRect
type GDExtensionSpxSpriteSetColliderCircle C.GDExtensionSpxSpriteSetColliderCircle
type GDExtensionSpxSpriteSetColliderCapsule C.GDExtensionSpxSpriteSetColliderCapsule
type GDExtensionSpxSpriteSetCollisionEnabled C.GDExtensionSpxSpriteSetCollisionEnabled
type GDExtensionSpxSpriteIsCollisionEnabled C.GDExtensionSpxSpriteIsCollisionEnabled
type GDExtensionSpxSpriteSetTriggerRect C.GDExtensionSpxSpriteSetTriggerRect
type GDExtensionSpxSpriteSetTriggerCircle C.GDExtensionSpxSpriteSetTriggerCircle
type GDExtensionSpxSpriteSetTriggerCapsule C.GDExtensionSpxSpriteSetTriggerCapsule
type GDExtensionSpxSpriteSetTriggerEnabled C.GDExtensionSpxSpriteSetTriggerEnabled
type GDExtensionSpxSpriteIsTriggerEnabled C.GDExtensionSpxSpriteIsTriggerEnabled
type GDExtensionSpxSpriteCheckCollisionByColor C.GDExtensionSpxSpriteCheckCollisionByColor
type GDExtensionSpxSpriteCheckCollisionByAlpha C.GDExtensionSpxSpriteCheckCollisionByAlpha
type GDExtensionSpxSpriteCheckCollisionWithSpriteByAlpha C.GDExtensionSpxSpriteCheckCollisionWithSpriteByAlpha
type GDExtensionSpxUiBindNode C.GDExtensionSpxUiBindNode
type GDExtensionSpxUiCreateNode C.GDExtensionSpxUiCreateNode
type GDExtensionSpxUiCreateButton C.GDExtensionSpxUiCreateButton
type GDExtensionSpxUiCreateLabel C.GDExtensionSpxUiCreateLabel
type GDExtensionSpxUiCreateImage C.GDExtensionSpxUiCreateImage
type GDExtensionSpxUiCreateToggle C.GDExtensionSpxUiCreateToggle
type GDExtensionSpxUiCreateSlider C.GDExtensionSpxUiCreateSlider
type GDExtensionSpxUiCreateInput C.GDExtensionSpxUiCreateInput
type GDExtensionSpxUiDestroyNode C.GDExtensionSpxUiDestroyNode
type GDExtensionSpxUiGetType C.GDExtensionSpxUiGetType
type GDExtensionSpxUiSetText C.GDExtensionSpxUiSetText
type GDExtensionSpxUiGetText C.GDExtensionSpxUiGetText
type GDExtensionSpxUiSetTexture C.GDExtensionSpxUiSetTexture
type GDExtensionSpxUiGetTexture C.GDExtensionSpxUiGetTexture
type GDExtensionSpxUiSetColor C.GDExtensionSpxUiSetColor
type GDExtensionSpxUiGetColor C.GDExtensionSpxUiGetColor
type GDExtensionSpxUiSetFontSize C.GDExtensionSpxUiSetFontSize
type GDExtensionSpxUiGetFontSize C.GDExtensionSpxUiGetFontSize
type GDExtensionSpxUiSetVisible C.GDExtensionSpxUiSetVisible
type GDExtensionSpxUiGetVisible C.GDExtensionSpxUiGetVisible
type GDExtensionSpxUiSetInteractable C.GDExtensionSpxUiSetInteractable
type GDExtensionSpxUiGetInteractable C.GDExtensionSpxUiGetInteractable
type GDExtensionSpxUiSetRect C.GDExtensionSpxUiSetRect
type GDExtensionSpxUiGetRect C.GDExtensionSpxUiGetRect
type GDExtensionSpxUiGetLayoutDirection C.GDExtensionSpxUiGetLayoutDirection
type GDExtensionSpxUiSetLayoutDirection C.GDExtensionSpxUiSetLayoutDirection
type GDExtensionSpxUiGetLayoutMode C.GDExtensionSpxUiGetLayoutMode
type GDExtensionSpxUiSetLayoutMode C.GDExtensionSpxUiSetLayoutMode
type GDExtensionSpxUiGetAnchorsPreset C.GDExtensionSpxUiGetAnchorsPreset
type GDExtensionSpxUiSetAnchorsPreset C.GDExtensionSpxUiSetAnchorsPreset
type GDExtensionSpxUiGetScale C.GDExtensionSpxUiGetScale
type GDExtensionSpxUiSetScale C.GDExtensionSpxUiSetScale
type GDExtensionSpxUiGetPosition C.GDExtensionSpxUiGetPosition
type GDExtensionSpxUiSetPosition C.GDExtensionSpxUiSetPosition
type GDExtensionSpxUiGetSize C.GDExtensionSpxUiGetSize
type GDExtensionSpxUiSetSize C.GDExtensionSpxUiSetSize
type GDExtensionSpxUiGetGlobalPosition C.GDExtensionSpxUiGetGlobalPosition
type GDExtensionSpxUiSetGlobalPosition C.GDExtensionSpxUiSetGlobalPosition
type GDExtensionSpxUiGetRotation C.GDExtensionSpxUiGetRotation
type GDExtensionSpxUiSetRotation C.GDExtensionSpxUiSetRotation
type GDExtensionSpxUiGetFlip C.GDExtensionSpxUiGetFlip
type GDExtensionSpxUiSetFlip C.GDExtensionSpxUiSetFlip

// call gdextension interface functions
func CallAudioStopAll() {
	arg0 := (C.GDExtensionSpxAudioStopAll)(api.SpxAudioStopAll)

	C.cgo_callfn_GDExtensionSpxAudioStopAll(arg0)
}
func CallAudioCreateAudio() GdObj {
	arg0 := (C.GDExtensionSpxAudioCreateAudio)(api.SpxAudioCreateAudio)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxAudioCreateAudio(arg0, &ret_val)
	return (GdObj)(ret_val)
}
func CallAudioDestroyAudio(
	obj GdObj,
) {
	arg0 := (C.GDExtensionSpxAudioDestroyAudio)(api.SpxAudioDestroyAudio)
	arg1GdObj = (C.GdObj)(obj)

	C.cgo_callfn_GDExtensionSpxAudioDestroyAudio(arg0, arg1GdObj)

}
func CallAudioSetPitch(
	obj GdObj,
	pitch GdFloat,
) {
	arg0 := (C.GDExtensionSpxAudioSetPitch)(api.SpxAudioSetPitch)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdFloat = (C.GdFloat)(pitch)

	C.cgo_callfn_GDExtensionSpxAudioSetPitch(arg0, arg1GdObj, arg2GdFloat)

}
func CallAudioGetPitch(
	obj GdObj,
) GdFloat {
	arg0 := (C.GDExtensionSpxAudioGetPitch)(api.SpxAudioGetPitch)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxAudioGetPitch(arg0, arg1GdObj, &ret_val)

	return (GdFloat)(ret_val)
}
func CallAudioSetPan(
	obj GdObj,
	pan GdFloat,
) {
	arg0 := (C.GDExtensionSpxAudioSetPan)(api.SpxAudioSetPan)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdFloat = (C.GdFloat)(pan)

	C.cgo_callfn_GDExtensionSpxAudioSetPan(arg0, arg1GdObj, arg2GdFloat)

}
func CallAudioGetPan(
	obj GdObj,
) GdFloat {
	arg0 := (C.GDExtensionSpxAudioGetPan)(api.SpxAudioGetPan)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxAudioGetPan(arg0, arg1GdObj, &ret_val)

	return (GdFloat)(ret_val)
}
func CallAudioPlay(
	obj GdObj,
	path GdString,
) {
	arg0 := (C.GDExtensionSpxAudioPlay)(api.SpxAudioPlay)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)

	C.cgo_callfn_GDExtensionSpxAudioPlay(arg0, arg1GdObj, arg2GdString)

}
func CallAudioPause(
	obj GdObj,
) {
	arg0 := (C.GDExtensionSpxAudioPause)(api.SpxAudioPause)
	arg1GdObj = (C.GdObj)(obj)

	C.cgo_callfn_GDExtensionSpxAudioPause(arg0, arg1GdObj)

}
func CallAudioResume(
	obj GdObj,
) {
	arg0 := (C.GDExtensionSpxAudioResume)(api.SpxAudioResume)
	arg1GdObj = (C.GdObj)(obj)

	C.cgo_callfn_GDExtensionSpxAudioResume(arg0, arg1GdObj)

}
func CallAudioStop(
	obj GdObj,
) {
	arg0 := (C.GDExtensionSpxAudioStop)(api.SpxAudioStop)
	arg1GdObj = (C.GdObj)(obj)

	C.cgo_callfn_GDExtensionSpxAudioStop(arg0, arg1GdObj)

}
func CallAudioSetLoop(
	obj GdObj,
	loop GdBool,
) {
	arg0 := (C.GDExtensionSpxAudioSetLoop)(api.SpxAudioSetLoop)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(loop)

	C.cgo_callfn_GDExtensionSpxAudioSetLoop(arg0, arg1GdObj, arg2GdBool)

}
func CallAudioGetLoop(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxAudioGetLoop)(api.SpxAudioGetLoop)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxAudioGetLoop(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallAudioGetTimer(
	obj GdObj,
) GdFloat {
	arg0 := (C.GDExtensionSpxAudioGetTimer)(api.SpxAudioGetTimer)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxAudioGetTimer(arg0, arg1GdObj, &ret_val)

	return (GdFloat)(ret_val)
}
func CallAudioSetTimer(
	obj GdObj,
	time GdFloat,
) {
	arg0 := (C.GDExtensionSpxAudioSetTimer)(api.SpxAudioSetTimer)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdFloat = (C.GdFloat)(time)

	C.cgo_callfn_GDExtensionSpxAudioSetTimer(arg0, arg1GdObj, arg2GdFloat)

}
func CallAudioIsPlaying(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxAudioIsPlaying)(api.SpxAudioIsPlaying)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxAudioIsPlaying(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallAudioSetVolume(
	obj GdObj,
	volume GdFloat,
) {
	arg0 := (C.GDExtensionSpxAudioSetVolume)(api.SpxAudioSetVolume)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdFloat = (C.GdFloat)(volume)

	C.cgo_callfn_GDExtensionSpxAudioSetVolume(arg0, arg1GdObj, arg2GdFloat)

}
func CallAudioGetVolume(
	obj GdObj,
) GdFloat {
	arg0 := (C.GDExtensionSpxAudioGetVolume)(api.SpxAudioGetVolume)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxAudioGetVolume(arg0, arg1GdObj, &ret_val)

	return (GdFloat)(ret_val)
}
func CallCameraGetCameraPosition() GdVec2 {
	arg0 := (C.GDExtensionSpxCameraGetCameraPosition)(api.SpxCameraGetCameraPosition)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxCameraGetCameraPosition(arg0, &ret_val)
	return (GdVec2)(ret_val)
}
func CallCameraSetCameraPosition(
	position GdVec2,
) {
	arg0 := (C.GDExtensionSpxCameraSetCameraPosition)(api.SpxCameraSetCameraPosition)
	arg1GdVec2 = (C.GdVec2)(position)

	C.cgo_callfn_GDExtensionSpxCameraSetCameraPosition(arg0, arg1GdVec2)

}
func CallCameraGetCameraZoom() GdVec2 {
	arg0 := (C.GDExtensionSpxCameraGetCameraZoom)(api.SpxCameraGetCameraZoom)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxCameraGetCameraZoom(arg0, &ret_val)
	return (GdVec2)(ret_val)
}
func CallCameraSetCameraZoom(
	size GdVec2,
) {
	arg0 := (C.GDExtensionSpxCameraSetCameraZoom)(api.SpxCameraSetCameraZoom)
	arg1GdVec2 = (C.GdVec2)(size)

	C.cgo_callfn_GDExtensionSpxCameraSetCameraZoom(arg0, arg1GdVec2)

}
func CallCameraGetViewportRect() GdRect2 {
	arg0 := (C.GDExtensionSpxCameraGetViewportRect)(api.SpxCameraGetViewportRect)
	var ret_val C.GdRect2
	C.cgo_callfn_GDExtensionSpxCameraGetViewportRect(arg0, &ret_val)
	return (GdRect2)(ret_val)
}
func CallExtDestroyAllPens() {
	arg0 := (C.GDExtensionSpxExtDestroyAllPens)(api.SpxExtDestroyAllPens)

	C.cgo_callfn_GDExtensionSpxExtDestroyAllPens(arg0)
}
func CallExtCreatePen() GdObj {
	arg0 := (C.GDExtensionSpxExtCreatePen)(api.SpxExtCreatePen)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxExtCreatePen(arg0, &ret_val)
	return (GdObj)(ret_val)
}
func CallExtDestroyPen(
	obj GdObj,
) {
	arg0 := (C.GDExtensionSpxExtDestroyPen)(api.SpxExtDestroyPen)
	arg1GdObj = (C.GdObj)(obj)

	C.cgo_callfn_GDExtensionSpxExtDestroyPen(arg0, arg1GdObj)

}
func CallExtPenStamp(
	obj GdObj,
) {
	arg0 := (C.GDExtensionSpxExtPenStamp)(api.SpxExtPenStamp)
	arg1GdObj = (C.GdObj)(obj)

	C.cgo_callfn_GDExtensionSpxExtPenStamp(arg0, arg1GdObj)

}
func CallExtMovePenTo(
	obj GdObj,
	position GdVec2,
) {
	arg0 := (C.GDExtensionSpxExtMovePenTo)(api.SpxExtMovePenTo)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(position)

	C.cgo_callfn_GDExtensionSpxExtMovePenTo(arg0, arg1GdObj, arg2GdVec2)

}
func CallExtPenDown(
	obj GdObj,
	move_by_mouse GdBool,
) {
	arg0 := (C.GDExtensionSpxExtPenDown)(api.SpxExtPenDown)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(move_by_mouse)

	C.cgo_callfn_GDExtensionSpxExtPenDown(arg0, arg1GdObj, arg2GdBool)

}
func CallExtPenUp(
	obj GdObj,
) {
	arg0 := (C.GDExtensionSpxExtPenUp)(api.SpxExtPenUp)
	arg1GdObj = (C.GdObj)(obj)

	C.cgo_callfn_GDExtensionSpxExtPenUp(arg0, arg1GdObj)

}
func CallExtSetPenColorTo(
	obj GdObj,
	color GdColor,
) {
	arg0 := (C.GDExtensionSpxExtSetPenColorTo)(api.SpxExtSetPenColorTo)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdColor = (C.GdColor)(color)

	C.cgo_callfn_GDExtensionSpxExtSetPenColorTo(arg0, arg1GdObj, arg2GdColor)

}
func CallExtChangePenBy(
	obj GdObj,
	property GdInt,
	amount GdFloat,
) {
	arg0 := (C.GDExtensionSpxExtChangePenBy)(api.SpxExtChangePenBy)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(property)
	arg3GdFloat = (C.GdFloat)(amount)

	C.cgo_callfn_GDExtensionSpxExtChangePenBy(arg0, arg1GdObj, arg2GdInt, arg3GdFloat)

}
func CallExtSetPenTo(
	obj GdObj,
	property GdInt,
	value GdFloat,
) {
	arg0 := (C.GDExtensionSpxExtSetPenTo)(api.SpxExtSetPenTo)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(property)
	arg3GdFloat = (C.GdFloat)(value)

	C.cgo_callfn_GDExtensionSpxExtSetPenTo(arg0, arg1GdObj, arg2GdInt, arg3GdFloat)

}
func CallExtChangePenSizeBy(
	obj GdObj,
	amount GdFloat,
) {
	arg0 := (C.GDExtensionSpxExtChangePenSizeBy)(api.SpxExtChangePenSizeBy)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdFloat = (C.GdFloat)(amount)

	C.cgo_callfn_GDExtensionSpxExtChangePenSizeBy(arg0, arg1GdObj, arg2GdFloat)

}
func CallExtSetPenSizeTo(
	obj GdObj,
	size GdFloat,
) {
	arg0 := (C.GDExtensionSpxExtSetPenSizeTo)(api.SpxExtSetPenSizeTo)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdFloat = (C.GdFloat)(size)

	C.cgo_callfn_GDExtensionSpxExtSetPenSizeTo(arg0, arg1GdObj, arg2GdFloat)

}
func CallExtSetPenStampTexture(
	obj GdObj,
	texture_path GdString,
) {
	arg0 := (C.GDExtensionSpxExtSetPenStampTexture)(api.SpxExtSetPenStampTexture)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(texture_path)

	C.cgo_callfn_GDExtensionSpxExtSetPenStampTexture(arg0, arg1GdObj, arg2GdString)

}
func CallInputGetMousePos() GdVec2 {
	arg0 := (C.GDExtensionSpxInputGetMousePos)(api.SpxInputGetMousePos)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxInputGetMousePos(arg0, &ret_val)
	return (GdVec2)(ret_val)
}
func CallInputGetKey(
	key GdInt,
) GdBool {
	arg0 := (C.GDExtensionSpxInputGetKey)(api.SpxInputGetKey)
	arg1GdInt = (C.GdInt)(key)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxInputGetKey(arg0, arg1GdInt, &ret_val)

	return (GdBool)(ret_val)
}
func CallInputGetMouseState(
	mouse_id GdInt,
) GdBool {
	arg0 := (C.GDExtensionSpxInputGetMouseState)(api.SpxInputGetMouseState)
	arg1GdInt = (C.GdInt)(mouse_id)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxInputGetMouseState(arg0, arg1GdInt, &ret_val)

	return (GdBool)(ret_val)
}
func CallInputGetKeyState(
	key GdInt,
) GdInt {
	arg0 := (C.GDExtensionSpxInputGetKeyState)(api.SpxInputGetKeyState)
	arg1GdInt = (C.GdInt)(key)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxInputGetKeyState(arg0, arg1GdInt, &ret_val)

	return (GdInt)(ret_val)
}
func CallInputGetAxis(
	neg_action GdString,
	pos_action GdString,
) GdFloat {
	arg0 := (C.GDExtensionSpxInputGetAxis)(api.SpxInputGetAxis)
	arg1GdString = (C.GdString)(neg_action)
	arg2GdString = (C.GdString)(pos_action)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxInputGetAxis(arg0, arg1GdString, arg2GdString, &ret_val)

	return (GdFloat)(ret_val)
}
func CallInputIsActionPressed(
	action GdString,
) GdBool {
	arg0 := (C.GDExtensionSpxInputIsActionPressed)(api.SpxInputIsActionPressed)
	arg1GdString = (C.GdString)(action)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxInputIsActionPressed(arg0, arg1GdString, &ret_val)

	return (GdBool)(ret_val)
}
func CallInputIsActionJustPressed(
	action GdString,
) GdBool {
	arg0 := (C.GDExtensionSpxInputIsActionJustPressed)(api.SpxInputIsActionJustPressed)
	arg1GdString = (C.GdString)(action)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxInputIsActionJustPressed(arg0, arg1GdString, &ret_val)

	return (GdBool)(ret_val)
}
func CallInputIsActionJustReleased(
	action GdString,
) GdBool {
	arg0 := (C.GDExtensionSpxInputIsActionJustReleased)(api.SpxInputIsActionJustReleased)
	arg1GdString = (C.GdString)(action)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxInputIsActionJustReleased(arg0, arg1GdString, &ret_val)

	return (GdBool)(ret_val)
}
func CallPhysicRaycast(
	from GdVec2,
	to GdVec2,
	collision_mask GdInt,
) GdObj {
	arg0 := (C.GDExtensionSpxPhysicRaycast)(api.SpxPhysicRaycast)
	arg1GdVec2 = (C.GdVec2)(from)
	arg2GdVec2 = (C.GdVec2)(to)
	arg3GdInt = (C.GdInt)(collision_mask)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxPhysicRaycast(arg0, arg1GdVec2, arg2GdVec2, arg3GdInt, &ret_val)

	return (GdObj)(ret_val)
}
func CallPhysicCheckCollision(
	from GdVec2,
	to GdVec2,
	collision_mask GdInt,
	collide_with_areas GdBool,
	collide_with_bodies GdBool,
) GdBool {
	arg0 := (C.GDExtensionSpxPhysicCheckCollision)(api.SpxPhysicCheckCollision)
	arg1GdVec2 = (C.GdVec2)(from)
	arg2GdVec2 = (C.GdVec2)(to)
	arg3GdInt = (C.GdInt)(collision_mask)
	arg4GdBool = (C.GdBool)(collide_with_areas)
	arg5GdBool = (C.GdBool)(collide_with_bodies)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxPhysicCheckCollision(arg0, arg1GdVec2, arg2GdVec2, arg3GdInt, arg4GdBool, arg5GdBool, &ret_val)

	return (GdBool)(ret_val)
}
func CallPhysicCheckTouchedCameraBoundary(
	obj GdObj,
	board_type GdInt,
) GdBool {
	arg0 := (C.GDExtensionSpxPhysicCheckTouchedCameraBoundary)(api.SpxPhysicCheckTouchedCameraBoundary)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(board_type)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxPhysicCheckTouchedCameraBoundary(arg0, arg1GdObj, arg2GdInt, &ret_val)

	return (GdBool)(ret_val)
}
func CallPhysicSetCollisionSystemType(
	is_collision_by_alpha GdBool,
) {
	arg0 := (C.GDExtensionSpxPhysicSetCollisionSystemType)(api.SpxPhysicSetCollisionSystemType)
	arg1GdBool = (C.GdBool)(is_collision_by_alpha)

	C.cgo_callfn_GDExtensionSpxPhysicSetCollisionSystemType(arg0, arg1GdBool)

}
func CallPlatformSetWindowPosition(
	pos GdVec2,
) {
	arg0 := (C.GDExtensionSpxPlatformSetWindowPosition)(api.SpxPlatformSetWindowPosition)
	arg1GdVec2 = (C.GdVec2)(pos)

	C.cgo_callfn_GDExtensionSpxPlatformSetWindowPosition(arg0, arg1GdVec2)

}
func CallPlatformGetWindowPosition() GdVec2 {
	arg0 := (C.GDExtensionSpxPlatformGetWindowPosition)(api.SpxPlatformGetWindowPosition)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxPlatformGetWindowPosition(arg0, &ret_val)
	return (GdVec2)(ret_val)
}
func CallPlatformSetWindowSize(
	width GdInt,
	height GdInt,
) {
	arg0 := (C.GDExtensionSpxPlatformSetWindowSize)(api.SpxPlatformSetWindowSize)
	arg1GdInt = (C.GdInt)(width)
	arg2GdInt = (C.GdInt)(height)

	C.cgo_callfn_GDExtensionSpxPlatformSetWindowSize(arg0, arg1GdInt, arg2GdInt)

}
func CallPlatformGetWindowSize() GdVec2 {
	arg0 := (C.GDExtensionSpxPlatformGetWindowSize)(api.SpxPlatformGetWindowSize)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxPlatformGetWindowSize(arg0, &ret_val)
	return (GdVec2)(ret_val)
}
func CallPlatformSetWindowTitle(
	title GdString,
) {
	arg0 := (C.GDExtensionSpxPlatformSetWindowTitle)(api.SpxPlatformSetWindowTitle)
	arg1GdString = (C.GdString)(title)

	C.cgo_callfn_GDExtensionSpxPlatformSetWindowTitle(arg0, arg1GdString)

}
func CallPlatformGetWindowTitle() GdString {
	arg0 := (C.GDExtensionSpxPlatformGetWindowTitle)(api.SpxPlatformGetWindowTitle)
	var ret_val C.GdString
	C.cgo_callfn_GDExtensionSpxPlatformGetWindowTitle(arg0, &ret_val)
	return (GdString)(ret_val)
}
func CallPlatformSetWindowFullscreen(
	enable GdBool,
) {
	arg0 := (C.GDExtensionSpxPlatformSetWindowFullscreen)(api.SpxPlatformSetWindowFullscreen)
	arg1GdBool = (C.GdBool)(enable)

	C.cgo_callfn_GDExtensionSpxPlatformSetWindowFullscreen(arg0, arg1GdBool)

}
func CallPlatformIsWindowFullscreen() GdBool {
	arg0 := (C.GDExtensionSpxPlatformIsWindowFullscreen)(api.SpxPlatformIsWindowFullscreen)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxPlatformIsWindowFullscreen(arg0, &ret_val)
	return (GdBool)(ret_val)
}
func CallPlatformSetDebugMode(
	enable GdBool,
) {
	arg0 := (C.GDExtensionSpxPlatformSetDebugMode)(api.SpxPlatformSetDebugMode)
	arg1GdBool = (C.GdBool)(enable)

	C.cgo_callfn_GDExtensionSpxPlatformSetDebugMode(arg0, arg1GdBool)

}
func CallPlatformIsDebugMode() GdBool {
	arg0 := (C.GDExtensionSpxPlatformIsDebugMode)(api.SpxPlatformIsDebugMode)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxPlatformIsDebugMode(arg0, &ret_val)
	return (GdBool)(ret_val)
}
func CallPlatformGetTimeScale() GdFloat {
	arg0 := (C.GDExtensionSpxPlatformGetTimeScale)(api.SpxPlatformGetTimeScale)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxPlatformGetTimeScale(arg0, &ret_val)
	return (GdFloat)(ret_val)
}
func CallPlatformSetTimeScale(
	time_scale GdFloat,
) {
	arg0 := (C.GDExtensionSpxPlatformSetTimeScale)(api.SpxPlatformSetTimeScale)
	arg1GdFloat = (C.GdFloat)(time_scale)

	C.cgo_callfn_GDExtensionSpxPlatformSetTimeScale(arg0, arg1GdFloat)

}
func CallPlatformGetPersistantDataDir() GdString {
	arg0 := (C.GDExtensionSpxPlatformGetPersistantDataDir)(api.SpxPlatformGetPersistantDataDir)
	var ret_val C.GdString
	C.cgo_callfn_GDExtensionSpxPlatformGetPersistantDataDir(arg0, &ret_val)
	return (GdString)(ret_val)
}
func CallPlatformSetPersistantDataDir(
	path GdString,
) {
	arg0 := (C.GDExtensionSpxPlatformSetPersistantDataDir)(api.SpxPlatformSetPersistantDataDir)
	arg1GdString = (C.GdString)(path)

	C.cgo_callfn_GDExtensionSpxPlatformSetPersistantDataDir(arg0, arg1GdString)

}
func CallPlatformIsInPersistantDataDir(
	path GdString,
) GdBool {
	arg0 := (C.GDExtensionSpxPlatformIsInPersistantDataDir)(api.SpxPlatformIsInPersistantDataDir)
	arg1GdString = (C.GdString)(path)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxPlatformIsInPersistantDataDir(arg0, arg1GdString, &ret_val)

	return (GdBool)(ret_val)
}
func CallResCreateAnimation(
	sprite_type_name GdString,
	anim_name GdString,
	context GdString,
	fps GdInt,
	is_altas GdBool,
) {
	arg0 := (C.GDExtensionSpxResCreateAnimation)(api.SpxResCreateAnimation)
	arg1GdString = (C.GdString)(sprite_type_name)
	arg2GdString = (C.GdString)(anim_name)
	arg3GdString = (C.GdString)(context)
	arg4GdInt = (C.GdInt)(fps)
	arg5GdBool = (C.GdBool)(is_altas)

	C.cgo_callfn_GDExtensionSpxResCreateAnimation(arg0, arg1GdString, arg2GdString, arg3GdString, arg4GdInt, arg5GdBool)

}
func CallResSetLoadMode(
	is_direct_mode GdBool,
) {
	arg0 := (C.GDExtensionSpxResSetLoadMode)(api.SpxResSetLoadMode)
	arg1GdBool = (C.GdBool)(is_direct_mode)

	C.cgo_callfn_GDExtensionSpxResSetLoadMode(arg0, arg1GdBool)

}
func CallResGetLoadMode() GdBool {
	arg0 := (C.GDExtensionSpxResGetLoadMode)(api.SpxResGetLoadMode)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxResGetLoadMode(arg0, &ret_val)
	return (GdBool)(ret_val)
}
func CallResGetBoundFromAlpha(
	p_path GdString,
) GdRect2 {
	arg0 := (C.GDExtensionSpxResGetBoundFromAlpha)(api.SpxResGetBoundFromAlpha)
	arg1GdString = (C.GdString)(p_path)
	var ret_val C.GdRect2
	C.cgo_callfn_GDExtensionSpxResGetBoundFromAlpha(arg0, arg1GdString, &ret_val)

	return (GdRect2)(ret_val)
}
func CallResGetImageSize(
	p_path GdString,
) GdVec2 {
	arg0 := (C.GDExtensionSpxResGetImageSize)(api.SpxResGetImageSize)
	arg1GdString = (C.GdString)(p_path)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxResGetImageSize(arg0, arg1GdString, &ret_val)

	return (GdVec2)(ret_val)
}
func CallResReadAllText(
	p_path GdString,
) GdString {
	arg0 := (C.GDExtensionSpxResReadAllText)(api.SpxResReadAllText)
	arg1GdString = (C.GdString)(p_path)
	var ret_val C.GdString
	C.cgo_callfn_GDExtensionSpxResReadAllText(arg0, arg1GdString, &ret_val)

	return (GdString)(ret_val)
}
func CallResHasFile(
	p_path GdString,
) GdBool {
	arg0 := (C.GDExtensionSpxResHasFile)(api.SpxResHasFile)
	arg1GdString = (C.GdString)(p_path)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxResHasFile(arg0, arg1GdString, &ret_val)

	return (GdBool)(ret_val)
}
func CallResReloadTexture(
	path GdString,
) {
	arg0 := (C.GDExtensionSpxResReloadTexture)(api.SpxResReloadTexture)
	arg1GdString = (C.GdString)(path)

	C.cgo_callfn_GDExtensionSpxResReloadTexture(arg0, arg1GdString)

}
func CallSceneChangeSceneToFile(
	path GdString,
) {
	arg0 := (C.GDExtensionSpxSceneChangeSceneToFile)(api.SpxSceneChangeSceneToFile)
	arg1GdString = (C.GdString)(path)

	C.cgo_callfn_GDExtensionSpxSceneChangeSceneToFile(arg0, arg1GdString)

}
func CallSceneDestroyAllSprites() {
	arg0 := (C.GDExtensionSpxSceneDestroyAllSprites)(api.SpxSceneDestroyAllSprites)

	C.cgo_callfn_GDExtensionSpxSceneDestroyAllSprites(arg0)
}
func CallSceneReloadCurrentScene() GdInt {
	arg0 := (C.GDExtensionSpxSceneReloadCurrentScene)(api.SpxSceneReloadCurrentScene)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxSceneReloadCurrentScene(arg0, &ret_val)
	return (GdInt)(ret_val)
}
func CallSceneUnloadCurrentScene() {
	arg0 := (C.GDExtensionSpxSceneUnloadCurrentScene)(api.SpxSceneUnloadCurrentScene)

	C.cgo_callfn_GDExtensionSpxSceneUnloadCurrentScene(arg0)
}
func CallSpriteSetDontDestroyOnLoad(
	obj GdObj,
) {
	arg0 := (C.GDExtensionSpxSpriteSetDontDestroyOnLoad)(api.SpxSpriteSetDontDestroyOnLoad)
	arg1GdObj = (C.GdObj)(obj)

	C.cgo_callfn_GDExtensionSpxSpriteSetDontDestroyOnLoad(arg0, arg1GdObj)

}
func CallSpriteSetProcess(
	obj GdObj,
	is_on GdBool,
) {
	arg0 := (C.GDExtensionSpxSpriteSetProcess)(api.SpxSpriteSetProcess)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(is_on)

	C.cgo_callfn_GDExtensionSpxSpriteSetProcess(arg0, arg1GdObj, arg2GdBool)

}
func CallSpriteSetPhysicProcess(
	obj GdObj,
	is_on GdBool,
) {
	arg0 := (C.GDExtensionSpxSpriteSetPhysicProcess)(api.SpxSpriteSetPhysicProcess)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(is_on)

	C.cgo_callfn_GDExtensionSpxSpriteSetPhysicProcess(arg0, arg1GdObj, arg2GdBool)

}
func CallSpriteSetTypeName(
	obj GdObj,
	type_name GdString,
) {
	arg0 := (C.GDExtensionSpxSpriteSetTypeName)(api.SpxSpriteSetTypeName)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(type_name)

	C.cgo_callfn_GDExtensionSpxSpriteSetTypeName(arg0, arg1GdObj, arg2GdString)

}
func CallSpriteSetChildPosition(
	obj GdObj,
	path GdString,
	pos GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetChildPosition)(api.SpxSpriteSetChildPosition)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)
	arg3GdVec2 = (C.GdVec2)(pos)

	C.cgo_callfn_GDExtensionSpxSpriteSetChildPosition(arg0, arg1GdObj, arg2GdString, arg3GdVec2)

}
func CallSpriteGetChildPosition(
	obj GdObj,
	path GdString,
) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetChildPosition)(api.SpxSpriteGetChildPosition)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetChildPosition(arg0, arg1GdObj, arg2GdString, &ret_val)

	return (GdVec2)(ret_val)
}
func CallSpriteSetChildRotation(
	obj GdObj,
	path GdString,
	rot GdFloat,
) {
	arg0 := (C.GDExtensionSpxSpriteSetChildRotation)(api.SpxSpriteSetChildRotation)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)
	arg3GdFloat = (C.GdFloat)(rot)

	C.cgo_callfn_GDExtensionSpxSpriteSetChildRotation(arg0, arg1GdObj, arg2GdString, arg3GdFloat)

}
func CallSpriteGetChildRotation(
	obj GdObj,
	path GdString,
) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetChildRotation)(api.SpxSpriteGetChildRotation)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxSpriteGetChildRotation(arg0, arg1GdObj, arg2GdString, &ret_val)

	return (GdFloat)(ret_val)
}
func CallSpriteSetChildScale(
	obj GdObj,
	path GdString,
	scale GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetChildScale)(api.SpxSpriteSetChildScale)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)
	arg3GdVec2 = (C.GdVec2)(scale)

	C.cgo_callfn_GDExtensionSpxSpriteSetChildScale(arg0, arg1GdObj, arg2GdString, arg3GdVec2)

}
func CallSpriteGetChildScale(
	obj GdObj,
	path GdString,
) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetChildScale)(api.SpxSpriteGetChildScale)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetChildScale(arg0, arg1GdObj, arg2GdString, &ret_val)

	return (GdVec2)(ret_val)
}
func CallSpriteCheckCollision(
	obj GdObj,
	target GdObj,
	is_src_trigger GdBool,
	is_dst_trigger GdBool,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteCheckCollision)(api.SpxSpriteCheckCollision)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdObj = (C.GdObj)(target)
	arg3GdBool = (C.GdBool)(is_src_trigger)
	arg4GdBool = (C.GdBool)(is_dst_trigger)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteCheckCollision(arg0, arg1GdObj, arg2GdObj, arg3GdBool, arg4GdBool, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteCheckCollisionWithPoint(
	obj GdObj,
	point GdVec2,
	is_trigger GdBool,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteCheckCollisionWithPoint)(api.SpxSpriteCheckCollisionWithPoint)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(point)
	arg3GdBool = (C.GdBool)(is_trigger)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteCheckCollisionWithPoint(arg0, arg1GdObj, arg2GdVec2, arg3GdBool, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteCreateBackdrop(
	path GdString,
) GdObj {
	arg0 := (C.GDExtensionSpxSpriteCreateBackdrop)(api.SpxSpriteCreateBackdrop)
	arg1GdString = (C.GdString)(path)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxSpriteCreateBackdrop(arg0, arg1GdString, &ret_val)

	return (GdObj)(ret_val)
}
func CallSpriteCreateSprite(
	path GdString,
) GdObj {
	arg0 := (C.GDExtensionSpxSpriteCreateSprite)(api.SpxSpriteCreateSprite)
	arg1GdString = (C.GdString)(path)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxSpriteCreateSprite(arg0, arg1GdString, &ret_val)

	return (GdObj)(ret_val)
}
func CallSpriteCloneSprite(
	obj GdObj,
) GdObj {
	arg0 := (C.GDExtensionSpxSpriteCloneSprite)(api.SpxSpriteCloneSprite)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxSpriteCloneSprite(arg0, arg1GdObj, &ret_val)

	return (GdObj)(ret_val)
}
func CallSpriteDestroySprite(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteDestroySprite)(api.SpxSpriteDestroySprite)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteDestroySprite(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteIsSpriteAlive(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsSpriteAlive)(api.SpxSpriteIsSpriteAlive)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsSpriteAlive(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteSetPosition(
	obj GdObj,
	pos GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetPosition)(api.SpxSpriteSetPosition)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(pos)

	C.cgo_callfn_GDExtensionSpxSpriteSetPosition(arg0, arg1GdObj, arg2GdVec2)

}
func CallSpriteGetPosition(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetPosition)(api.SpxSpriteGetPosition)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetPosition(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallSpriteSetRotation(
	obj GdObj,
	rot GdFloat,
) {
	arg0 := (C.GDExtensionSpxSpriteSetRotation)(api.SpxSpriteSetRotation)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdFloat = (C.GdFloat)(rot)

	C.cgo_callfn_GDExtensionSpxSpriteSetRotation(arg0, arg1GdObj, arg2GdFloat)

}
func CallSpriteGetRotation(
	obj GdObj,
) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetRotation)(api.SpxSpriteGetRotation)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxSpriteGetRotation(arg0, arg1GdObj, &ret_val)

	return (GdFloat)(ret_val)
}
func CallSpriteSetScale(
	obj GdObj,
	scale GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetScale)(api.SpxSpriteSetScale)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(scale)

	C.cgo_callfn_GDExtensionSpxSpriteSetScale(arg0, arg1GdObj, arg2GdVec2)

}
func CallSpriteGetScale(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetScale)(api.SpxSpriteGetScale)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetScale(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallSpriteSetRenderScale(
	obj GdObj,
	scale GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetRenderScale)(api.SpxSpriteSetRenderScale)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(scale)

	C.cgo_callfn_GDExtensionSpxSpriteSetRenderScale(arg0, arg1GdObj, arg2GdVec2)

}
func CallSpriteGetRenderScale(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetRenderScale)(api.SpxSpriteGetRenderScale)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetRenderScale(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallSpriteSetColor(
	obj GdObj,
	color GdColor,
) {
	arg0 := (C.GDExtensionSpxSpriteSetColor)(api.SpxSpriteSetColor)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdColor = (C.GdColor)(color)

	C.cgo_callfn_GDExtensionSpxSpriteSetColor(arg0, arg1GdObj, arg2GdColor)

}
func CallSpriteGetColor(
	obj GdObj,
) GdColor {
	arg0 := (C.GDExtensionSpxSpriteGetColor)(api.SpxSpriteGetColor)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdColor
	C.cgo_callfn_GDExtensionSpxSpriteGetColor(arg0, arg1GdObj, &ret_val)

	return (GdColor)(ret_val)
}
func CallSpriteSetMaterialShader(
	obj GdObj,
	path GdString,
) {
	arg0 := (C.GDExtensionSpxSpriteSetMaterialShader)(api.SpxSpriteSetMaterialShader)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)

	C.cgo_callfn_GDExtensionSpxSpriteSetMaterialShader(arg0, arg1GdObj, arg2GdString)

}
func CallSpriteGetMaterialShader(
	obj GdObj,
) GdString {
	arg0 := (C.GDExtensionSpxSpriteGetMaterialShader)(api.SpxSpriteGetMaterialShader)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdString
	C.cgo_callfn_GDExtensionSpxSpriteGetMaterialShader(arg0, arg1GdObj, &ret_val)

	return (GdString)(ret_val)
}
func CallSpriteSetMaterialParams(
	obj GdObj,
	effect GdString,
	amount GdFloat,
) {
	arg0 := (C.GDExtensionSpxSpriteSetMaterialParams)(api.SpxSpriteSetMaterialParams)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(effect)
	arg3GdFloat = (C.GdFloat)(amount)

	C.cgo_callfn_GDExtensionSpxSpriteSetMaterialParams(arg0, arg1GdObj, arg2GdString, arg3GdFloat)

}
func CallSpriteGetMaterialParams(
	obj GdObj,
	effect GdString,
) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetMaterialParams)(api.SpxSpriteGetMaterialParams)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(effect)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxSpriteGetMaterialParams(arg0, arg1GdObj, arg2GdString, &ret_val)

	return (GdFloat)(ret_val)
}
func CallSpriteSetTextureAltas(
	obj GdObj,
	path GdString,
	rect2 GdRect2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetTextureAltas)(api.SpxSpriteSetTextureAltas)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)
	arg3GdRect2 = (C.GdRect2)(rect2)

	C.cgo_callfn_GDExtensionSpxSpriteSetTextureAltas(arg0, arg1GdObj, arg2GdString, arg3GdRect2)

}
func CallSpriteSetTexture(
	obj GdObj,
	path GdString,
) {
	arg0 := (C.GDExtensionSpxSpriteSetTexture)(api.SpxSpriteSetTexture)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)

	C.cgo_callfn_GDExtensionSpxSpriteSetTexture(arg0, arg1GdObj, arg2GdString)

}
func CallSpriteSetTextureAltasDirect(
	obj GdObj,
	path GdString,
	rect2 GdRect2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetTextureAltasDirect)(api.SpxSpriteSetTextureAltasDirect)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)
	arg3GdRect2 = (C.GdRect2)(rect2)

	C.cgo_callfn_GDExtensionSpxSpriteSetTextureAltasDirect(arg0, arg1GdObj, arg2GdString, arg3GdRect2)

}
func CallSpriteSetTextureDirect(
	obj GdObj,
	path GdString,
) {
	arg0 := (C.GDExtensionSpxSpriteSetTextureDirect)(api.SpxSpriteSetTextureDirect)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)

	C.cgo_callfn_GDExtensionSpxSpriteSetTextureDirect(arg0, arg1GdObj, arg2GdString)

}
func CallSpriteGetTexture(
	obj GdObj,
) GdString {
	arg0 := (C.GDExtensionSpxSpriteGetTexture)(api.SpxSpriteGetTexture)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdString
	C.cgo_callfn_GDExtensionSpxSpriteGetTexture(arg0, arg1GdObj, &ret_val)

	return (GdString)(ret_val)
}
func CallSpriteSetVisible(
	obj GdObj,
	visible GdBool,
) {
	arg0 := (C.GDExtensionSpxSpriteSetVisible)(api.SpxSpriteSetVisible)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(visible)

	C.cgo_callfn_GDExtensionSpxSpriteSetVisible(arg0, arg1GdObj, arg2GdBool)

}
func CallSpriteGetVisible(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteGetVisible)(api.SpxSpriteGetVisible)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteGetVisible(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteGetZIndex(
	obj GdObj,
) GdInt {
	arg0 := (C.GDExtensionSpxSpriteGetZIndex)(api.SpxSpriteGetZIndex)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxSpriteGetZIndex(arg0, arg1GdObj, &ret_val)

	return (GdInt)(ret_val)
}
func CallSpriteSetZIndex(
	obj GdObj,
	z GdInt,
) {
	arg0 := (C.GDExtensionSpxSpriteSetZIndex)(api.SpxSpriteSetZIndex)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(z)

	C.cgo_callfn_GDExtensionSpxSpriteSetZIndex(arg0, arg1GdObj, arg2GdInt)

}
func CallSpritePlayAnim(
	obj GdObj,
	p_name GdString,
	p_speed GdFloat,
	isLoop GdBool,
	p_revert GdBool,
) {
	arg0 := (C.GDExtensionSpxSpritePlayAnim)(api.SpxSpritePlayAnim)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(p_name)
	arg3GdFloat = (C.GdFloat)(p_speed)
	arg4GdBool = (C.GdBool)(isLoop)
	arg5GdBool = (C.GdBool)(p_revert)

	C.cgo_callfn_GDExtensionSpxSpritePlayAnim(arg0, arg1GdObj, arg2GdString, arg3GdFloat, arg4GdBool, arg5GdBool)

}
func CallSpritePlayBackwardsAnim(
	obj GdObj,
	p_name GdString,
) {
	arg0 := (C.GDExtensionSpxSpritePlayBackwardsAnim)(api.SpxSpritePlayBackwardsAnim)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(p_name)

	C.cgo_callfn_GDExtensionSpxSpritePlayBackwardsAnim(arg0, arg1GdObj, arg2GdString)

}
func CallSpritePauseAnim(
	obj GdObj,
) {
	arg0 := (C.GDExtensionSpxSpritePauseAnim)(api.SpxSpritePauseAnim)
	arg1GdObj = (C.GdObj)(obj)

	C.cgo_callfn_GDExtensionSpxSpritePauseAnim(arg0, arg1GdObj)

}
func CallSpriteStopAnim(
	obj GdObj,
) {
	arg0 := (C.GDExtensionSpxSpriteStopAnim)(api.SpxSpriteStopAnim)
	arg1GdObj = (C.GdObj)(obj)

	C.cgo_callfn_GDExtensionSpxSpriteStopAnim(arg0, arg1GdObj)

}
func CallSpriteIsPlayingAnim(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsPlayingAnim)(api.SpxSpriteIsPlayingAnim)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsPlayingAnim(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteSetAnim(
	obj GdObj,
	p_name GdString,
) {
	arg0 := (C.GDExtensionSpxSpriteSetAnim)(api.SpxSpriteSetAnim)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(p_name)

	C.cgo_callfn_GDExtensionSpxSpriteSetAnim(arg0, arg1GdObj, arg2GdString)

}
func CallSpriteGetAnim(
	obj GdObj,
) GdString {
	arg0 := (C.GDExtensionSpxSpriteGetAnim)(api.SpxSpriteGetAnim)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdString
	C.cgo_callfn_GDExtensionSpxSpriteGetAnim(arg0, arg1GdObj, &ret_val)

	return (GdString)(ret_val)
}
func CallSpriteSetAnimFrame(
	obj GdObj,
	p_frame GdInt,
) {
	arg0 := (C.GDExtensionSpxSpriteSetAnimFrame)(api.SpxSpriteSetAnimFrame)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(p_frame)

	C.cgo_callfn_GDExtensionSpxSpriteSetAnimFrame(arg0, arg1GdObj, arg2GdInt)

}
func CallSpriteGetAnimFrame(
	obj GdObj,
) GdInt {
	arg0 := (C.GDExtensionSpxSpriteGetAnimFrame)(api.SpxSpriteGetAnimFrame)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxSpriteGetAnimFrame(arg0, arg1GdObj, &ret_val)

	return (GdInt)(ret_val)
}
func CallSpriteSetAnimSpeedScale(
	obj GdObj,
	p_speed_scale GdFloat,
) {
	arg0 := (C.GDExtensionSpxSpriteSetAnimSpeedScale)(api.SpxSpriteSetAnimSpeedScale)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdFloat = (C.GdFloat)(p_speed_scale)

	C.cgo_callfn_GDExtensionSpxSpriteSetAnimSpeedScale(arg0, arg1GdObj, arg2GdFloat)

}
func CallSpriteGetAnimSpeedScale(
	obj GdObj,
) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetAnimSpeedScale)(api.SpxSpriteGetAnimSpeedScale)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxSpriteGetAnimSpeedScale(arg0, arg1GdObj, &ret_val)

	return (GdFloat)(ret_val)
}
func CallSpriteGetAnimPlayingSpeed(
	obj GdObj,
) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetAnimPlayingSpeed)(api.SpxSpriteGetAnimPlayingSpeed)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxSpriteGetAnimPlayingSpeed(arg0, arg1GdObj, &ret_val)

	return (GdFloat)(ret_val)
}
func CallSpriteSetAnimCentered(
	obj GdObj,
	p_center GdBool,
) {
	arg0 := (C.GDExtensionSpxSpriteSetAnimCentered)(api.SpxSpriteSetAnimCentered)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(p_center)

	C.cgo_callfn_GDExtensionSpxSpriteSetAnimCentered(arg0, arg1GdObj, arg2GdBool)

}
func CallSpriteIsAnimCentered(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsAnimCentered)(api.SpxSpriteIsAnimCentered)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsAnimCentered(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteSetAnimOffset(
	obj GdObj,
	p_offset GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetAnimOffset)(api.SpxSpriteSetAnimOffset)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(p_offset)

	C.cgo_callfn_GDExtensionSpxSpriteSetAnimOffset(arg0, arg1GdObj, arg2GdVec2)

}
func CallSpriteGetAnimOffset(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetAnimOffset)(api.SpxSpriteGetAnimOffset)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetAnimOffset(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallSpriteSetAnimFlipH(
	obj GdObj,
	p_flip GdBool,
) {
	arg0 := (C.GDExtensionSpxSpriteSetAnimFlipH)(api.SpxSpriteSetAnimFlipH)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(p_flip)

	C.cgo_callfn_GDExtensionSpxSpriteSetAnimFlipH(arg0, arg1GdObj, arg2GdBool)

}
func CallSpriteIsAnimFlippedH(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsAnimFlippedH)(api.SpxSpriteIsAnimFlippedH)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsAnimFlippedH(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteSetAnimFlipV(
	obj GdObj,
	p_flip GdBool,
) {
	arg0 := (C.GDExtensionSpxSpriteSetAnimFlipV)(api.SpxSpriteSetAnimFlipV)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(p_flip)

	C.cgo_callfn_GDExtensionSpxSpriteSetAnimFlipV(arg0, arg1GdObj, arg2GdBool)

}
func CallSpriteIsAnimFlippedV(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsAnimFlippedV)(api.SpxSpriteIsAnimFlippedV)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsAnimFlippedV(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteSetVelocity(
	obj GdObj,
	velocity GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetVelocity)(api.SpxSpriteSetVelocity)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(velocity)

	C.cgo_callfn_GDExtensionSpxSpriteSetVelocity(arg0, arg1GdObj, arg2GdVec2)

}
func CallSpriteGetVelocity(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetVelocity)(api.SpxSpriteGetVelocity)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetVelocity(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallSpriteIsOnFloor(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsOnFloor)(api.SpxSpriteIsOnFloor)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsOnFloor(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteIsOnFloorOnly(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsOnFloorOnly)(api.SpxSpriteIsOnFloorOnly)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsOnFloorOnly(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteIsOnWall(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsOnWall)(api.SpxSpriteIsOnWall)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsOnWall(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteIsOnWallOnly(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsOnWallOnly)(api.SpxSpriteIsOnWallOnly)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsOnWallOnly(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteIsOnCeiling(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsOnCeiling)(api.SpxSpriteIsOnCeiling)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsOnCeiling(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteIsOnCeilingOnly(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsOnCeilingOnly)(api.SpxSpriteIsOnCeilingOnly)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsOnCeilingOnly(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteGetLastMotion(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetLastMotion)(api.SpxSpriteGetLastMotion)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetLastMotion(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallSpriteGetPositionDelta(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetPositionDelta)(api.SpxSpriteGetPositionDelta)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetPositionDelta(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallSpriteGetFloorNormal(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetFloorNormal)(api.SpxSpriteGetFloorNormal)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetFloorNormal(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallSpriteGetWallNormal(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetWallNormal)(api.SpxSpriteGetWallNormal)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetWallNormal(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallSpriteGetRealVelocity(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetRealVelocity)(api.SpxSpriteGetRealVelocity)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetRealVelocity(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallSpriteMoveAndSlide(
	obj GdObj,
) {
	arg0 := (C.GDExtensionSpxSpriteMoveAndSlide)(api.SpxSpriteMoveAndSlide)
	arg1GdObj = (C.GdObj)(obj)

	C.cgo_callfn_GDExtensionSpxSpriteMoveAndSlide(arg0, arg1GdObj)

}
func CallSpriteSetGravity(
	obj GdObj,
	gravity GdFloat,
) {
	arg0 := (C.GDExtensionSpxSpriteSetGravity)(api.SpxSpriteSetGravity)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdFloat = (C.GdFloat)(gravity)

	C.cgo_callfn_GDExtensionSpxSpriteSetGravity(arg0, arg1GdObj, arg2GdFloat)

}
func CallSpriteGetGravity(
	obj GdObj,
) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetGravity)(api.SpxSpriteGetGravity)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxSpriteGetGravity(arg0, arg1GdObj, &ret_val)

	return (GdFloat)(ret_val)
}
func CallSpriteSetMass(
	obj GdObj,
	mass GdFloat,
) {
	arg0 := (C.GDExtensionSpxSpriteSetMass)(api.SpxSpriteSetMass)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdFloat = (C.GdFloat)(mass)

	C.cgo_callfn_GDExtensionSpxSpriteSetMass(arg0, arg1GdObj, arg2GdFloat)

}
func CallSpriteGetMass(
	obj GdObj,
) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetMass)(api.SpxSpriteGetMass)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxSpriteGetMass(arg0, arg1GdObj, &ret_val)

	return (GdFloat)(ret_val)
}
func CallSpriteAddForce(
	obj GdObj,
	force GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteAddForce)(api.SpxSpriteAddForce)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(force)

	C.cgo_callfn_GDExtensionSpxSpriteAddForce(arg0, arg1GdObj, arg2GdVec2)

}
func CallSpriteAddImpulse(
	obj GdObj,
	impulse GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteAddImpulse)(api.SpxSpriteAddImpulse)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(impulse)

	C.cgo_callfn_GDExtensionSpxSpriteAddImpulse(arg0, arg1GdObj, arg2GdVec2)

}
func CallSpriteSetCollisionLayer(
	obj GdObj,
	layer GdInt,
) {
	arg0 := (C.GDExtensionSpxSpriteSetCollisionLayer)(api.SpxSpriteSetCollisionLayer)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(layer)

	C.cgo_callfn_GDExtensionSpxSpriteSetCollisionLayer(arg0, arg1GdObj, arg2GdInt)

}
func CallSpriteGetCollisionLayer(
	obj GdObj,
) GdInt {
	arg0 := (C.GDExtensionSpxSpriteGetCollisionLayer)(api.SpxSpriteGetCollisionLayer)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxSpriteGetCollisionLayer(arg0, arg1GdObj, &ret_val)

	return (GdInt)(ret_val)
}
func CallSpriteSetCollisionMask(
	obj GdObj,
	mask GdInt,
) {
	arg0 := (C.GDExtensionSpxSpriteSetCollisionMask)(api.SpxSpriteSetCollisionMask)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(mask)

	C.cgo_callfn_GDExtensionSpxSpriteSetCollisionMask(arg0, arg1GdObj, arg2GdInt)

}
func CallSpriteGetCollisionMask(
	obj GdObj,
) GdInt {
	arg0 := (C.GDExtensionSpxSpriteGetCollisionMask)(api.SpxSpriteGetCollisionMask)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxSpriteGetCollisionMask(arg0, arg1GdObj, &ret_val)

	return (GdInt)(ret_val)
}
func CallSpriteSetTriggerLayer(
	obj GdObj,
	layer GdInt,
) {
	arg0 := (C.GDExtensionSpxSpriteSetTriggerLayer)(api.SpxSpriteSetTriggerLayer)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(layer)

	C.cgo_callfn_GDExtensionSpxSpriteSetTriggerLayer(arg0, arg1GdObj, arg2GdInt)

}
func CallSpriteGetTriggerLayer(
	obj GdObj,
) GdInt {
	arg0 := (C.GDExtensionSpxSpriteGetTriggerLayer)(api.SpxSpriteGetTriggerLayer)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxSpriteGetTriggerLayer(arg0, arg1GdObj, &ret_val)

	return (GdInt)(ret_val)
}
func CallSpriteSetTriggerMask(
	obj GdObj,
	mask GdInt,
) {
	arg0 := (C.GDExtensionSpxSpriteSetTriggerMask)(api.SpxSpriteSetTriggerMask)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(mask)

	C.cgo_callfn_GDExtensionSpxSpriteSetTriggerMask(arg0, arg1GdObj, arg2GdInt)

}
func CallSpriteGetTriggerMask(
	obj GdObj,
) GdInt {
	arg0 := (C.GDExtensionSpxSpriteGetTriggerMask)(api.SpxSpriteGetTriggerMask)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxSpriteGetTriggerMask(arg0, arg1GdObj, &ret_val)

	return (GdInt)(ret_val)
}
func CallSpriteSetColliderRect(
	obj GdObj,
	center GdVec2,
	size GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetColliderRect)(api.SpxSpriteSetColliderRect)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(center)
	arg3GdVec2 = (C.GdVec2)(size)

	C.cgo_callfn_GDExtensionSpxSpriteSetColliderRect(arg0, arg1GdObj, arg2GdVec2, arg3GdVec2)

}
func CallSpriteSetColliderCircle(
	obj GdObj,
	center GdVec2,
	radius GdFloat,
) {
	arg0 := (C.GDExtensionSpxSpriteSetColliderCircle)(api.SpxSpriteSetColliderCircle)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(center)
	arg3GdFloat = (C.GdFloat)(radius)

	C.cgo_callfn_GDExtensionSpxSpriteSetColliderCircle(arg0, arg1GdObj, arg2GdVec2, arg3GdFloat)

}
func CallSpriteSetColliderCapsule(
	obj GdObj,
	center GdVec2,
	size GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetColliderCapsule)(api.SpxSpriteSetColliderCapsule)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(center)
	arg3GdVec2 = (C.GdVec2)(size)

	C.cgo_callfn_GDExtensionSpxSpriteSetColliderCapsule(arg0, arg1GdObj, arg2GdVec2, arg3GdVec2)

}
func CallSpriteSetCollisionEnabled(
	obj GdObj,
	enabled GdBool,
) {
	arg0 := (C.GDExtensionSpxSpriteSetCollisionEnabled)(api.SpxSpriteSetCollisionEnabled)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(enabled)

	C.cgo_callfn_GDExtensionSpxSpriteSetCollisionEnabled(arg0, arg1GdObj, arg2GdBool)

}
func CallSpriteIsCollisionEnabled(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsCollisionEnabled)(api.SpxSpriteIsCollisionEnabled)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsCollisionEnabled(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteSetTriggerRect(
	obj GdObj,
	center GdVec2,
	size GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetTriggerRect)(api.SpxSpriteSetTriggerRect)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(center)
	arg3GdVec2 = (C.GdVec2)(size)

	C.cgo_callfn_GDExtensionSpxSpriteSetTriggerRect(arg0, arg1GdObj, arg2GdVec2, arg3GdVec2)

}
func CallSpriteSetTriggerCircle(
	obj GdObj,
	center GdVec2,
	radius GdFloat,
) {
	arg0 := (C.GDExtensionSpxSpriteSetTriggerCircle)(api.SpxSpriteSetTriggerCircle)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(center)
	arg3GdFloat = (C.GdFloat)(radius)

	C.cgo_callfn_GDExtensionSpxSpriteSetTriggerCircle(arg0, arg1GdObj, arg2GdVec2, arg3GdFloat)

}
func CallSpriteSetTriggerCapsule(
	obj GdObj,
	center GdVec2,
	size GdVec2,
) {
	arg0 := (C.GDExtensionSpxSpriteSetTriggerCapsule)(api.SpxSpriteSetTriggerCapsule)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(center)
	arg3GdVec2 = (C.GdVec2)(size)

	C.cgo_callfn_GDExtensionSpxSpriteSetTriggerCapsule(arg0, arg1GdObj, arg2GdVec2, arg3GdVec2)

}
func CallSpriteSetTriggerEnabled(
	obj GdObj,
	trigger GdBool,
) {
	arg0 := (C.GDExtensionSpxSpriteSetTriggerEnabled)(api.SpxSpriteSetTriggerEnabled)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(trigger)

	C.cgo_callfn_GDExtensionSpxSpriteSetTriggerEnabled(arg0, arg1GdObj, arg2GdBool)

}
func CallSpriteIsTriggerEnabled(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsTriggerEnabled)(api.SpxSpriteIsTriggerEnabled)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteIsTriggerEnabled(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteCheckCollisionByColor(
	obj GdObj,
	color GdColor,
	color_threshold GdFloat,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteCheckCollisionByColor)(api.SpxSpriteCheckCollisionByColor)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdColor = (C.GdColor)(color)
	arg3GdFloat = (C.GdFloat)(color_threshold)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteCheckCollisionByColor(arg0, arg1GdObj, arg2GdColor, arg3GdFloat, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteCheckCollisionByAlpha(
	obj GdObj,
	alpha_threshold GdFloat,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteCheckCollisionByAlpha)(api.SpxSpriteCheckCollisionByAlpha)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdFloat = (C.GdFloat)(alpha_threshold)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteCheckCollisionByAlpha(arg0, arg1GdObj, arg2GdFloat, &ret_val)

	return (GdBool)(ret_val)
}
func CallSpriteCheckCollisionWithSpriteByAlpha(
	obj GdObj,
	obj_b GdObj,
	alpha_threshold GdFloat,
) GdBool {
	arg0 := (C.GDExtensionSpxSpriteCheckCollisionWithSpriteByAlpha)(api.SpxSpriteCheckCollisionWithSpriteByAlpha)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdObj = (C.GdObj)(obj_b)
	arg3GdFloat = (C.GdFloat)(alpha_threshold)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxSpriteCheckCollisionWithSpriteByAlpha(arg0, arg1GdObj, arg2GdObj, arg3GdFloat, &ret_val)

	return (GdBool)(ret_val)
}
func CallUiBindNode(
	obj GdObj,
	rel_path GdString,
) GdObj {
	arg0 := (C.GDExtensionSpxUiBindNode)(api.SpxUiBindNode)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(rel_path)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxUiBindNode(arg0, arg1GdObj, arg2GdString, &ret_val)

	return (GdObj)(ret_val)
}
func CallUiCreateNode(
	path GdString,
) GdObj {
	arg0 := (C.GDExtensionSpxUiCreateNode)(api.SpxUiCreateNode)
	arg1GdString = (C.GdString)(path)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxUiCreateNode(arg0, arg1GdString, &ret_val)

	return (GdObj)(ret_val)
}
func CallUiCreateButton(
	path GdString,
	text GdString,
) GdObj {
	arg0 := (C.GDExtensionSpxUiCreateButton)(api.SpxUiCreateButton)
	arg1GdString = (C.GdString)(path)
	arg2GdString = (C.GdString)(text)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxUiCreateButton(arg0, arg1GdString, arg2GdString, &ret_val)

	return (GdObj)(ret_val)
}
func CallUiCreateLabel(
	path GdString,
	text GdString,
) GdObj {
	arg0 := (C.GDExtensionSpxUiCreateLabel)(api.SpxUiCreateLabel)
	arg1GdString = (C.GdString)(path)
	arg2GdString = (C.GdString)(text)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxUiCreateLabel(arg0, arg1GdString, arg2GdString, &ret_val)

	return (GdObj)(ret_val)
}
func CallUiCreateImage(
	path GdString,
) GdObj {
	arg0 := (C.GDExtensionSpxUiCreateImage)(api.SpxUiCreateImage)
	arg1GdString = (C.GdString)(path)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxUiCreateImage(arg0, arg1GdString, &ret_val)

	return (GdObj)(ret_val)
}
func CallUiCreateToggle(
	path GdString,
	value GdBool,
) GdObj {
	arg0 := (C.GDExtensionSpxUiCreateToggle)(api.SpxUiCreateToggle)
	arg1GdString = (C.GdString)(path)
	arg2GdBool = (C.GdBool)(value)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxUiCreateToggle(arg0, arg1GdString, arg2GdBool, &ret_val)

	return (GdObj)(ret_val)
}
func CallUiCreateSlider(
	path GdString,
	value GdFloat,
) GdObj {
	arg0 := (C.GDExtensionSpxUiCreateSlider)(api.SpxUiCreateSlider)
	arg1GdString = (C.GdString)(path)
	arg2GdFloat = (C.GdFloat)(value)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxUiCreateSlider(arg0, arg1GdString, arg2GdFloat, &ret_val)

	return (GdObj)(ret_val)
}
func CallUiCreateInput(
	path GdString,
	text GdString,
) GdObj {
	arg0 := (C.GDExtensionSpxUiCreateInput)(api.SpxUiCreateInput)
	arg1GdString = (C.GdString)(path)
	arg2GdString = (C.GdString)(text)
	var ret_val C.GdObj
	C.cgo_callfn_GDExtensionSpxUiCreateInput(arg0, arg1GdString, arg2GdString, &ret_val)

	return (GdObj)(ret_val)
}
func CallUiDestroyNode(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxUiDestroyNode)(api.SpxUiDestroyNode)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxUiDestroyNode(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallUiGetType(
	obj GdObj,
) GdInt {
	arg0 := (C.GDExtensionSpxUiGetType)(api.SpxUiGetType)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxUiGetType(arg0, arg1GdObj, &ret_val)

	return (GdInt)(ret_val)
}
func CallUiSetText(
	obj GdObj,
	text GdString,
) {
	arg0 := (C.GDExtensionSpxUiSetText)(api.SpxUiSetText)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(text)

	C.cgo_callfn_GDExtensionSpxUiSetText(arg0, arg1GdObj, arg2GdString)

}
func CallUiGetText(
	obj GdObj,
) GdString {
	arg0 := (C.GDExtensionSpxUiGetText)(api.SpxUiGetText)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdString
	C.cgo_callfn_GDExtensionSpxUiGetText(arg0, arg1GdObj, &ret_val)

	return (GdString)(ret_val)
}
func CallUiSetTexture(
	obj GdObj,
	path GdString,
) {
	arg0 := (C.GDExtensionSpxUiSetTexture)(api.SpxUiSetTexture)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdString = (C.GdString)(path)

	C.cgo_callfn_GDExtensionSpxUiSetTexture(arg0, arg1GdObj, arg2GdString)

}
func CallUiGetTexture(
	obj GdObj,
) GdString {
	arg0 := (C.GDExtensionSpxUiGetTexture)(api.SpxUiGetTexture)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdString
	C.cgo_callfn_GDExtensionSpxUiGetTexture(arg0, arg1GdObj, &ret_val)

	return (GdString)(ret_val)
}
func CallUiSetColor(
	obj GdObj,
	color GdColor,
) {
	arg0 := (C.GDExtensionSpxUiSetColor)(api.SpxUiSetColor)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdColor = (C.GdColor)(color)

	C.cgo_callfn_GDExtensionSpxUiSetColor(arg0, arg1GdObj, arg2GdColor)

}
func CallUiGetColor(
	obj GdObj,
) GdColor {
	arg0 := (C.GDExtensionSpxUiGetColor)(api.SpxUiGetColor)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdColor
	C.cgo_callfn_GDExtensionSpxUiGetColor(arg0, arg1GdObj, &ret_val)

	return (GdColor)(ret_val)
}
func CallUiSetFontSize(
	obj GdObj,
	size GdInt,
) {
	arg0 := (C.GDExtensionSpxUiSetFontSize)(api.SpxUiSetFontSize)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(size)

	C.cgo_callfn_GDExtensionSpxUiSetFontSize(arg0, arg1GdObj, arg2GdInt)

}
func CallUiGetFontSize(
	obj GdObj,
) GdInt {
	arg0 := (C.GDExtensionSpxUiGetFontSize)(api.SpxUiGetFontSize)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxUiGetFontSize(arg0, arg1GdObj, &ret_val)

	return (GdInt)(ret_val)
}
func CallUiSetVisible(
	obj GdObj,
	visible GdBool,
) {
	arg0 := (C.GDExtensionSpxUiSetVisible)(api.SpxUiSetVisible)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(visible)

	C.cgo_callfn_GDExtensionSpxUiSetVisible(arg0, arg1GdObj, arg2GdBool)

}
func CallUiGetVisible(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxUiGetVisible)(api.SpxUiGetVisible)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxUiGetVisible(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallUiSetInteractable(
	obj GdObj,
	interactable GdBool,
) {
	arg0 := (C.GDExtensionSpxUiSetInteractable)(api.SpxUiSetInteractable)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(interactable)

	C.cgo_callfn_GDExtensionSpxUiSetInteractable(arg0, arg1GdObj, arg2GdBool)

}
func CallUiGetInteractable(
	obj GdObj,
) GdBool {
	arg0 := (C.GDExtensionSpxUiGetInteractable)(api.SpxUiGetInteractable)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxUiGetInteractable(arg0, arg1GdObj, &ret_val)

	return (GdBool)(ret_val)
}
func CallUiSetRect(
	obj GdObj,
	rect GdRect2,
) {
	arg0 := (C.GDExtensionSpxUiSetRect)(api.SpxUiSetRect)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdRect2 = (C.GdRect2)(rect)

	C.cgo_callfn_GDExtensionSpxUiSetRect(arg0, arg1GdObj, arg2GdRect2)

}
func CallUiGetRect(
	obj GdObj,
) GdRect2 {
	arg0 := (C.GDExtensionSpxUiGetRect)(api.SpxUiGetRect)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdRect2
	C.cgo_callfn_GDExtensionSpxUiGetRect(arg0, arg1GdObj, &ret_val)

	return (GdRect2)(ret_val)
}
func CallUiGetLayoutDirection(
	obj GdObj,
) GdInt {
	arg0 := (C.GDExtensionSpxUiGetLayoutDirection)(api.SpxUiGetLayoutDirection)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxUiGetLayoutDirection(arg0, arg1GdObj, &ret_val)

	return (GdInt)(ret_val)
}
func CallUiSetLayoutDirection(
	obj GdObj,
	value GdInt,
) {
	arg0 := (C.GDExtensionSpxUiSetLayoutDirection)(api.SpxUiSetLayoutDirection)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(value)

	C.cgo_callfn_GDExtensionSpxUiSetLayoutDirection(arg0, arg1GdObj, arg2GdInt)

}
func CallUiGetLayoutMode(
	obj GdObj,
) GdInt {
	arg0 := (C.GDExtensionSpxUiGetLayoutMode)(api.SpxUiGetLayoutMode)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxUiGetLayoutMode(arg0, arg1GdObj, &ret_val)

	return (GdInt)(ret_val)
}
func CallUiSetLayoutMode(
	obj GdObj,
	value GdInt,
) {
	arg0 := (C.GDExtensionSpxUiSetLayoutMode)(api.SpxUiSetLayoutMode)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(value)

	C.cgo_callfn_GDExtensionSpxUiSetLayoutMode(arg0, arg1GdObj, arg2GdInt)

}
func CallUiGetAnchorsPreset(
	obj GdObj,
) GdInt {
	arg0 := (C.GDExtensionSpxUiGetAnchorsPreset)(api.SpxUiGetAnchorsPreset)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdInt
	C.cgo_callfn_GDExtensionSpxUiGetAnchorsPreset(arg0, arg1GdObj, &ret_val)

	return (GdInt)(ret_val)
}
func CallUiSetAnchorsPreset(
	obj GdObj,
	value GdInt,
) {
	arg0 := (C.GDExtensionSpxUiSetAnchorsPreset)(api.SpxUiSetAnchorsPreset)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdInt = (C.GdInt)(value)

	C.cgo_callfn_GDExtensionSpxUiSetAnchorsPreset(arg0, arg1GdObj, arg2GdInt)

}
func CallUiGetScale(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxUiGetScale)(api.SpxUiGetScale)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxUiGetScale(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallUiSetScale(
	obj GdObj,
	value GdVec2,
) {
	arg0 := (C.GDExtensionSpxUiSetScale)(api.SpxUiSetScale)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(value)

	C.cgo_callfn_GDExtensionSpxUiSetScale(arg0, arg1GdObj, arg2GdVec2)

}
func CallUiGetPosition(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxUiGetPosition)(api.SpxUiGetPosition)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxUiGetPosition(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallUiSetPosition(
	obj GdObj,
	value GdVec2,
) {
	arg0 := (C.GDExtensionSpxUiSetPosition)(api.SpxUiSetPosition)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(value)

	C.cgo_callfn_GDExtensionSpxUiSetPosition(arg0, arg1GdObj, arg2GdVec2)

}
func CallUiGetSize(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxUiGetSize)(api.SpxUiGetSize)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxUiGetSize(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallUiSetSize(
	obj GdObj,
	value GdVec2,
) {
	arg0 := (C.GDExtensionSpxUiSetSize)(api.SpxUiSetSize)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(value)

	C.cgo_callfn_GDExtensionSpxUiSetSize(arg0, arg1GdObj, arg2GdVec2)

}
func CallUiGetGlobalPosition(
	obj GdObj,
) GdVec2 {
	arg0 := (C.GDExtensionSpxUiGetGlobalPosition)(api.SpxUiGetGlobalPosition)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdVec2
	C.cgo_callfn_GDExtensionSpxUiGetGlobalPosition(arg0, arg1GdObj, &ret_val)

	return (GdVec2)(ret_val)
}
func CallUiSetGlobalPosition(
	obj GdObj,
	value GdVec2,
) {
	arg0 := (C.GDExtensionSpxUiSetGlobalPosition)(api.SpxUiSetGlobalPosition)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(value)

	C.cgo_callfn_GDExtensionSpxUiSetGlobalPosition(arg0, arg1GdObj, arg2GdVec2)

}
func CallUiGetRotation(
	obj GdObj,
) GdFloat {
	arg0 := (C.GDExtensionSpxUiGetRotation)(api.SpxUiGetRotation)
	arg1GdObj = (C.GdObj)(obj)
	var ret_val C.GdFloat
	C.cgo_callfn_GDExtensionSpxUiGetRotation(arg0, arg1GdObj, &ret_val)

	return (GdFloat)(ret_val)
}
func CallUiSetRotation(
	obj GdObj,
	value GdFloat,
) {
	arg0 := (C.GDExtensionSpxUiSetRotation)(api.SpxUiSetRotation)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdFloat = (C.GdFloat)(value)

	C.cgo_callfn_GDExtensionSpxUiSetRotation(arg0, arg1GdObj, arg2GdFloat)

}
func CallUiGetFlip(
	obj GdObj,
	horizontal GdBool,
) GdBool {
	arg0 := (C.GDExtensionSpxUiGetFlip)(api.SpxUiGetFlip)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(horizontal)
	var ret_val C.GdBool
	C.cgo_callfn_GDExtensionSpxUiGetFlip(arg0, arg1GdObj, arg2GdBool, &ret_val)

	return (GdBool)(ret_val)
}
func CallUiSetFlip(
	obj GdObj,
	horizontal GdBool,
	is_flip GdBool,
) {
	arg0 := (C.GDExtensionSpxUiSetFlip)(api.SpxUiSetFlip)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdBool = (C.GdBool)(horizontal)
	arg3GdBool = (C.GdBool)(is_flip)

	C.cgo_callfn_GDExtensionSpxUiSetFlip(arg0, arg1GdObj, arg2GdBool, arg3GdBool)

}
