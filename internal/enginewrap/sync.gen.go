//go:build !pure_engine
// +build !pure_engine

/*------------------------------------------------------------------------------
//   This code was generated by gdspx template sync.gen.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//----------------------------------------------------------------------------*/

package enginewrap

import (
	gdx "github.com/goplus/spx/v2/pkg/gdspx/pkg/engine"
	. "github.com/realdream-ai/mathf"
)

/* // copy these code to dst file
var(
audioMgr enginewrap.AudioMgrImpl
cameraMgr enginewrap.CameraMgrImpl
extMgr enginewrap.ExtMgrImpl
inputMgr enginewrap.InputMgrImpl
physicMgr enginewrap.PhysicMgrImpl
platformMgr enginewrap.PlatformMgrImpl
resMgr enginewrap.ResMgrImpl
sceneMgr enginewrap.SceneMgrImpl
spriteMgr enginewrap.SpriteMgrImpl
uiMgr enginewrap.UiMgrImpl

)
*/

var (
	audioMgr    AudioMgrImpl
	cameraMgr   CameraMgrImpl
	extMgr      ExtMgrImpl
	inputMgr    InputMgrImpl
	physicMgr   PhysicMgrImpl
	platformMgr PlatformMgrImpl
	resMgr      ResMgrImpl
	sceneMgr    SceneMgrImpl
	spriteMgr   SpriteMgrImpl
	uiMgr       UiMgrImpl
)

type audioMgrImpl struct {
}
type AudioMgrImpl struct {
	audioMgrImpl
}
type cameraMgrImpl struct {
}
type CameraMgrImpl struct {
	cameraMgrImpl
}
type extMgrImpl struct {
}
type ExtMgrImpl struct {
	extMgrImpl
}
type inputMgrImpl struct {
}
type InputMgrImpl struct {
	inputMgrImpl
}
type physicMgrImpl struct {
}
type PhysicMgrImpl struct {
	physicMgrImpl
}
type platformMgrImpl struct {
}
type PlatformMgrImpl struct {
	platformMgrImpl
}
type resMgrImpl struct {
}
type ResMgrImpl struct {
	resMgrImpl
}
type sceneMgrImpl struct {
}
type SceneMgrImpl struct {
	sceneMgrImpl
}
type spriteMgrImpl struct {
}
type SpriteMgrImpl struct {
	spriteMgrImpl
}
type uiMgrImpl struct {
}
type UiMgrImpl struct {
	uiMgrImpl
}

// IAudioMgr
func (pself *audioMgrImpl) StopAll() {
	callInMainThread(func() {
		gdx.AudioMgr.StopAll()
	})
}
func (pself *audioMgrImpl) CreateAudio() gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.AudioMgr.CreateAudio()
	})
	return _ret1
}
func (pself *audioMgrImpl) DestroyAudio(obj gdx.Object) {
	callInMainThread(func() {
		gdx.AudioMgr.DestroyAudio(obj)
	})
}
func (pself *audioMgrImpl) SetPitch(obj gdx.Object, pitch float64) {
	callInMainThread(func() {
		gdx.AudioMgr.SetPitch(obj, pitch)
	})
}
func (pself *audioMgrImpl) GetPitch(obj gdx.Object) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.AudioMgr.GetPitch(obj)
	})
	return _ret1
}
func (pself *audioMgrImpl) SetPan(obj gdx.Object, pan float64) {
	callInMainThread(func() {
		gdx.AudioMgr.SetPan(obj, pan)
	})
}
func (pself *audioMgrImpl) GetPan(obj gdx.Object) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.AudioMgr.GetPan(obj)
	})
	return _ret1
}
func (pself *audioMgrImpl) SetVolume(obj gdx.Object, volume float64) {
	callInMainThread(func() {
		gdx.AudioMgr.SetVolume(obj, volume)
	})
}
func (pself *audioMgrImpl) GetVolume(obj gdx.Object) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.AudioMgr.GetVolume(obj)
	})
	return _ret1
}
func (pself *audioMgrImpl) Play(obj gdx.Object, path string) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.AudioMgr.Play(obj, path)
	})
	return _ret1
}
func (pself *audioMgrImpl) Pause(aid int64) {
	callInMainThread(func() {
		gdx.AudioMgr.Pause(aid)
	})
}
func (pself *audioMgrImpl) Resume(aid int64) {
	callInMainThread(func() {
		gdx.AudioMgr.Resume(aid)
	})
}
func (pself *audioMgrImpl) Stop(aid int64) {
	callInMainThread(func() {
		gdx.AudioMgr.Stop(aid)
	})
}
func (pself *audioMgrImpl) SetLoop(aid int64, loop bool) {
	callInMainThread(func() {
		gdx.AudioMgr.SetLoop(aid, loop)
	})
}
func (pself *audioMgrImpl) GetLoop(aid int64) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.AudioMgr.GetLoop(aid)
	})
	return _ret1
}
func (pself *audioMgrImpl) GetTimer(aid int64) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.AudioMgr.GetTimer(aid)
	})
	return _ret1
}
func (pself *audioMgrImpl) SetTimer(aid int64, time float64) {
	callInMainThread(func() {
		gdx.AudioMgr.SetTimer(aid, time)
	})
}
func (pself *audioMgrImpl) IsPlaying(aid int64) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.AudioMgr.IsPlaying(aid)
	})
	return _ret1
}

// ICameraMgr
func (pself *cameraMgrImpl) GetCameraPosition() Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.CameraMgr.GetCameraPosition()
	})
	return _ret1
}
func (pself *cameraMgrImpl) SetCameraPosition(position Vec2) {
	callInMainThread(func() {
		gdx.CameraMgr.SetCameraPosition(position)
	})
}
func (pself *cameraMgrImpl) GetCameraZoom() Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.CameraMgr.GetCameraZoom()
	})
	return _ret1
}
func (pself *cameraMgrImpl) SetCameraZoom(size Vec2) {
	callInMainThread(func() {
		gdx.CameraMgr.SetCameraZoom(size)
	})
}
func (pself *cameraMgrImpl) GetViewportRect() Rect2 {
	var _ret1 Rect2
	callInMainThread(func() {
		_ret1 = gdx.CameraMgr.GetViewportRect()
	})
	return _ret1
}

// IExtMgr
func (pself *extMgrImpl) RequestExit(exit_code int64) {
	callInMainThread(func() {
		gdx.ExtMgr.RequestExit(exit_code)
	})
}
func (pself *extMgrImpl) OnRuntimePanic(msg string) {
	callInMainThread(func() {
		gdx.ExtMgr.OnRuntimePanic(msg)
	})
}
func (pself *extMgrImpl) DestroyAllPens() {
	callInMainThread(func() {
		gdx.ExtMgr.DestroyAllPens()
	})
}
func (pself *extMgrImpl) CreatePen() gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.ExtMgr.CreatePen()
	})
	return _ret1
}
func (pself *extMgrImpl) DestroyPen(obj gdx.Object) {
	callInMainThread(func() {
		gdx.ExtMgr.DestroyPen(obj)
	})
}
func (pself *extMgrImpl) PenStamp(obj gdx.Object) {
	callInMainThread(func() {
		gdx.ExtMgr.PenStamp(obj)
	})
}
func (pself *extMgrImpl) MovePenTo(obj gdx.Object, position Vec2) {
	callInMainThread(func() {
		gdx.ExtMgr.MovePenTo(obj, position)
	})
}
func (pself *extMgrImpl) PenDown(obj gdx.Object, move_by_mouse bool) {
	callInMainThread(func() {
		gdx.ExtMgr.PenDown(obj, move_by_mouse)
	})
}
func (pself *extMgrImpl) PenUp(obj gdx.Object) {
	callInMainThread(func() {
		gdx.ExtMgr.PenUp(obj)
	})
}
func (pself *extMgrImpl) SetPenColorTo(obj gdx.Object, color Color) {
	callInMainThread(func() {
		gdx.ExtMgr.SetPenColorTo(obj, color)
	})
}
func (pself *extMgrImpl) ChangePenBy(obj gdx.Object, property int64, amount float64) {
	callInMainThread(func() {
		gdx.ExtMgr.ChangePenBy(obj, property, amount)
	})
}
func (pself *extMgrImpl) SetPenTo(obj gdx.Object, property int64, value float64) {
	callInMainThread(func() {
		gdx.ExtMgr.SetPenTo(obj, property, value)
	})
}
func (pself *extMgrImpl) ChangePenSizeBy(obj gdx.Object, amount float64) {
	callInMainThread(func() {
		gdx.ExtMgr.ChangePenSizeBy(obj, amount)
	})
}
func (pself *extMgrImpl) SetPenSizeTo(obj gdx.Object, size float64) {
	callInMainThread(func() {
		gdx.ExtMgr.SetPenSizeTo(obj, size)
	})
}
func (pself *extMgrImpl) SetPenStampTexture(obj gdx.Object, texture_path string) {
	callInMainThread(func() {
		gdx.ExtMgr.SetPenStampTexture(obj, texture_path)
	})
}

// IInputMgr
func (pself *inputMgrImpl) GetMousePos() Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.InputMgr.GetMousePos()
	})
	return _ret1
}
func (pself *inputMgrImpl) GetKey(key int64) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.InputMgr.GetKey(key)
	})
	return _ret1
}
func (pself *inputMgrImpl) GetMouseState(mouse_id int64) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.InputMgr.GetMouseState(mouse_id)
	})
	return _ret1
}
func (pself *inputMgrImpl) GetKeyState(key int64) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.InputMgr.GetKeyState(key)
	})
	return _ret1
}
func (pself *inputMgrImpl) GetAxis(neg_action string, pos_action string) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.InputMgr.GetAxis(neg_action, pos_action)
	})
	return _ret1
}
func (pself *inputMgrImpl) IsActionPressed(action string) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.InputMgr.IsActionPressed(action)
	})
	return _ret1
}
func (pself *inputMgrImpl) IsActionJustPressed(action string) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.InputMgr.IsActionJustPressed(action)
	})
	return _ret1
}
func (pself *inputMgrImpl) IsActionJustReleased(action string) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.InputMgr.IsActionJustReleased(action)
	})
	return _ret1
}

// IPhysicMgr
func (pself *physicMgrImpl) Raycast(from Vec2, to Vec2, collision_mask int64) gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.PhysicMgr.Raycast(from, to, collision_mask)
	})
	return _ret1
}
func (pself *physicMgrImpl) CheckCollision(from Vec2, to Vec2, collision_mask int64, collide_with_areas bool, collide_with_bodies bool) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.PhysicMgr.CheckCollision(from, to, collision_mask, collide_with_areas, collide_with_bodies)
	})
	return _ret1
}
func (pself *physicMgrImpl) CheckTouchedCameraBoundaries(obj gdx.Object) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.PhysicMgr.CheckTouchedCameraBoundaries(obj)
	})
	return _ret1
}
func (pself *physicMgrImpl) CheckTouchedCameraBoundary(obj gdx.Object, board_type int64) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.PhysicMgr.CheckTouchedCameraBoundary(obj, board_type)
	})
	return _ret1
}
func (pself *physicMgrImpl) SetCollisionSystemType(is_collision_by_alpha bool) {
	callInMainThread(func() {
		gdx.PhysicMgr.SetCollisionSystemType(is_collision_by_alpha)
	})
}

// IPlatformMgr
func (pself *platformMgrImpl) SetWindowPosition(pos Vec2) {
	callInMainThread(func() {
		gdx.PlatformMgr.SetWindowPosition(pos)
	})
}
func (pself *platformMgrImpl) GetWindowPosition() Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.PlatformMgr.GetWindowPosition()
	})
	return _ret1
}
func (pself *platformMgrImpl) SetWindowSize(width int64, height int64) {
	callInMainThread(func() {
		gdx.PlatformMgr.SetWindowSize(width, height)
	})
}
func (pself *platformMgrImpl) GetWindowSize() Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.PlatformMgr.GetWindowSize()
	})
	return _ret1
}
func (pself *platformMgrImpl) SetWindowTitle(title string) {
	callInMainThread(func() {
		gdx.PlatformMgr.SetWindowTitle(title)
	})
}
func (pself *platformMgrImpl) GetWindowTitle() string {
	var _ret1 string
	callInMainThread(func() {
		_ret1 = gdx.PlatformMgr.GetWindowTitle()
	})
	return _ret1
}
func (pself *platformMgrImpl) SetWindowFullscreen(enable bool) {
	callInMainThread(func() {
		gdx.PlatformMgr.SetWindowFullscreen(enable)
	})
}
func (pself *platformMgrImpl) IsWindowFullscreen() bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.PlatformMgr.IsWindowFullscreen()
	})
	return _ret1
}
func (pself *platformMgrImpl) SetDebugMode(enable bool) {
	callInMainThread(func() {
		gdx.PlatformMgr.SetDebugMode(enable)
	})
}
func (pself *platformMgrImpl) IsDebugMode() bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.PlatformMgr.IsDebugMode()
	})
	return _ret1
}
func (pself *platformMgrImpl) GetTimeScale() float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.PlatformMgr.GetTimeScale()
	})
	return _ret1
}
func (pself *platformMgrImpl) SetTimeScale(time_scale float64) {
	callInMainThread(func() {
		gdx.PlatformMgr.SetTimeScale(time_scale)
	})
}
func (pself *platformMgrImpl) GetPersistantDataDir() string {
	var _ret1 string
	callInMainThread(func() {
		_ret1 = gdx.PlatformMgr.GetPersistantDataDir()
	})
	return _ret1
}
func (pself *platformMgrImpl) SetPersistantDataDir(path string) {
	callInMainThread(func() {
		gdx.PlatformMgr.SetPersistantDataDir(path)
	})
}
func (pself *platformMgrImpl) IsInPersistantDataDir(path string) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.PlatformMgr.IsInPersistantDataDir(path)
	})
	return _ret1
}

// IResMgr
func (pself *resMgrImpl) CreateAnimation(sprite_type_name string, anim_name string, context string, fps int64, is_altas bool) {
	callInMainThread(func() {
		gdx.ResMgr.CreateAnimation(sprite_type_name, anim_name, context, fps, is_altas)
	})
}
func (pself *resMgrImpl) SetLoadMode(is_direct_mode bool) {
	callInMainThread(func() {
		gdx.ResMgr.SetLoadMode(is_direct_mode)
	})
}
func (pself *resMgrImpl) GetLoadMode() bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.ResMgr.GetLoadMode()
	})
	return _ret1
}
func (pself *resMgrImpl) GetBoundFromAlpha(p_path string) Rect2 {
	var _ret1 Rect2
	callInMainThread(func() {
		_ret1 = gdx.ResMgr.GetBoundFromAlpha(p_path)
	})
	return _ret1
}
func (pself *resMgrImpl) GetImageSize(p_path string) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.ResMgr.GetImageSize(p_path)
	})
	return _ret1
}
func (pself *resMgrImpl) ReadAllText(p_path string) string {
	var _ret1 string
	callInMainThread(func() {
		_ret1 = gdx.ResMgr.ReadAllText(p_path)
	})
	return _ret1
}
func (pself *resMgrImpl) HasFile(p_path string) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.ResMgr.HasFile(p_path)
	})
	return _ret1
}
func (pself *resMgrImpl) ReloadTexture(path string) {
	callInMainThread(func() {
		gdx.ResMgr.ReloadTexture(path)
	})
}
func (pself *resMgrImpl) FreeStr(str string) {
	callInMainThread(func() {
		gdx.ResMgr.FreeStr(str)
	})
}
func (pself *resMgrImpl) SetDefaultFont(font_path string) {
	callInMainThread(func() {
		gdx.ResMgr.SetDefaultFont(font_path)
	})
}

// ISceneMgr
func (pself *sceneMgrImpl) ChangeSceneToFile(path string) {
	callInMainThread(func() {
		gdx.SceneMgr.ChangeSceneToFile(path)
	})
}
func (pself *sceneMgrImpl) DestroyAllSprites() {
	callInMainThread(func() {
		gdx.SceneMgr.DestroyAllSprites()
	})
}
func (pself *sceneMgrImpl) ReloadCurrentScene() int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.SceneMgr.ReloadCurrentScene()
	})
	return _ret1
}
func (pself *sceneMgrImpl) UnloadCurrentScene() {
	callInMainThread(func() {
		gdx.SceneMgr.UnloadCurrentScene()
	})
}

// ISpriteMgr
func (pself *spriteMgrImpl) SetDontDestroyOnLoad(obj gdx.Object) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetDontDestroyOnLoad(obj)
	})
}
func (pself *spriteMgrImpl) SetProcess(obj gdx.Object, is_on bool) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetProcess(obj, is_on)
	})
}
func (pself *spriteMgrImpl) SetPhysicProcess(obj gdx.Object, is_on bool) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetPhysicProcess(obj, is_on)
	})
}
func (pself *spriteMgrImpl) SetTypeName(obj gdx.Object, type_name string) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetTypeName(obj, type_name)
	})
}
func (pself *spriteMgrImpl) SetChildPosition(obj gdx.Object, path string, pos Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetChildPosition(obj, path, pos)
	})
}
func (pself *spriteMgrImpl) GetChildPosition(obj gdx.Object, path string) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetChildPosition(obj, path)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetChildRotation(obj gdx.Object, path string, rot float64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetChildRotation(obj, path, rot)
	})
}
func (pself *spriteMgrImpl) GetChildRotation(obj gdx.Object, path string) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetChildRotation(obj, path)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetChildScale(obj gdx.Object, path string, scale Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetChildScale(obj, path, scale)
	})
}
func (pself *spriteMgrImpl) GetChildScale(obj gdx.Object, path string) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetChildScale(obj, path)
	})
	return _ret1
}
func (pself *spriteMgrImpl) CheckCollision(obj gdx.Object, target gdx.Object, is_src_trigger bool, is_dst_trigger bool) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.CheckCollision(obj, target, is_src_trigger, is_dst_trigger)
	})
	return _ret1
}
func (pself *spriteMgrImpl) CheckCollisionWithPoint(obj gdx.Object, point Vec2, is_trigger bool) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.CheckCollisionWithPoint(obj, point, is_trigger)
	})
	return _ret1
}
func (pself *spriteMgrImpl) CreateBackdrop(path string) gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.CreateBackdrop(path)
	})
	return _ret1
}
func (pself *spriteMgrImpl) CreateSprite(path string) gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.CreateSprite(path)
	})
	return _ret1
}
func (pself *spriteMgrImpl) CloneSprite(obj gdx.Object) gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.CloneSprite(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) DestroySprite(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.DestroySprite(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) IsSpriteAlive(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsSpriteAlive(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetPosition(obj gdx.Object, pos Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetPosition(obj, pos)
	})
}
func (pself *spriteMgrImpl) GetPosition(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetPosition(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetRotation(obj gdx.Object, rot float64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetRotation(obj, rot)
	})
}
func (pself *spriteMgrImpl) GetRotation(obj gdx.Object) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetRotation(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetScale(obj gdx.Object, scale Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetScale(obj, scale)
	})
}
func (pself *spriteMgrImpl) GetScale(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetScale(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetRenderScale(obj gdx.Object, scale Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetRenderScale(obj, scale)
	})
}
func (pself *spriteMgrImpl) GetRenderScale(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetRenderScale(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetColor(obj gdx.Object, color Color) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetColor(obj, color)
	})
}
func (pself *spriteMgrImpl) GetColor(obj gdx.Object) Color {
	var _ret1 Color
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetColor(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetMaterialShader(obj gdx.Object, path string) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetMaterialShader(obj, path)
	})
}
func (pself *spriteMgrImpl) GetMaterialShader(obj gdx.Object) string {
	var _ret1 string
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetMaterialShader(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetMaterialParams(obj gdx.Object, effect string, amount float64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetMaterialParams(obj, effect, amount)
	})
}
func (pself *spriteMgrImpl) GetMaterialParams(obj gdx.Object, effect string) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetMaterialParams(obj, effect)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetMaterialParamsVec(obj gdx.Object, effect string, x float64, y float64, z float64, w float64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetMaterialParamsVec(obj, effect, x, y, z, w)
	})
}
func (pself *spriteMgrImpl) SetMaterialParamsVec4(obj gdx.Object, effect string, vec4 Vec4) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetMaterialParamsVec4(obj, effect, vec4)
	})
}
func (pself *spriteMgrImpl) GetMaterialParamsVec4(obj gdx.Object, effect string) Vec4 {
	var _ret1 Vec4
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetMaterialParamsVec4(obj, effect)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetMaterialParamsColor(obj gdx.Object, effect string, color Color) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetMaterialParamsColor(obj, effect, color)
	})
}
func (pself *spriteMgrImpl) GetMaterialParamsColor(obj gdx.Object, effect string) Color {
	var _ret1 Color
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetMaterialParamsColor(obj, effect)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetTextureAltas(obj gdx.Object, path string, rect2 Rect2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetTextureAltas(obj, path, rect2)
	})
}
func (pself *spriteMgrImpl) SetTexture(obj gdx.Object, path string) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetTexture(obj, path)
	})
}
func (pself *spriteMgrImpl) SetTextureAltasDirect(obj gdx.Object, path string, rect2 Rect2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetTextureAltasDirect(obj, path, rect2)
	})
}
func (pself *spriteMgrImpl) SetTextureDirect(obj gdx.Object, path string) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetTextureDirect(obj, path)
	})
}
func (pself *spriteMgrImpl) GetTexture(obj gdx.Object) string {
	var _ret1 string
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetTexture(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetVisible(obj gdx.Object, visible bool) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetVisible(obj, visible)
	})
}
func (pself *spriteMgrImpl) GetVisible(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetVisible(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) GetZIndex(obj gdx.Object) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetZIndex(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetZIndex(obj gdx.Object, z int64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetZIndex(obj, z)
	})
}
func (pself *spriteMgrImpl) PlayAnim(obj gdx.Object, p_name string, p_speed float64, isLoop bool, p_revert bool) {
	callInMainThread(func() {
		gdx.SpriteMgr.PlayAnim(obj, p_name, p_speed, isLoop, p_revert)
	})
}
func (pself *spriteMgrImpl) PlayBackwardsAnim(obj gdx.Object, p_name string) {
	callInMainThread(func() {
		gdx.SpriteMgr.PlayBackwardsAnim(obj, p_name)
	})
}
func (pself *spriteMgrImpl) PauseAnim(obj gdx.Object) {
	callInMainThread(func() {
		gdx.SpriteMgr.PauseAnim(obj)
	})
}
func (pself *spriteMgrImpl) StopAnim(obj gdx.Object) {
	callInMainThread(func() {
		gdx.SpriteMgr.StopAnim(obj)
	})
}
func (pself *spriteMgrImpl) IsPlayingAnim(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsPlayingAnim(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetAnim(obj gdx.Object, p_name string) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetAnim(obj, p_name)
	})
}
func (pself *spriteMgrImpl) GetAnim(obj gdx.Object) string {
	var _ret1 string
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetAnim(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetAnimFrame(obj gdx.Object, p_frame int64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetAnimFrame(obj, p_frame)
	})
}
func (pself *spriteMgrImpl) GetAnimFrame(obj gdx.Object) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetAnimFrame(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetAnimSpeedScale(obj gdx.Object, p_speed_scale float64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetAnimSpeedScale(obj, p_speed_scale)
	})
}
func (pself *spriteMgrImpl) GetAnimSpeedScale(obj gdx.Object) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetAnimSpeedScale(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) GetAnimPlayingSpeed(obj gdx.Object) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetAnimPlayingSpeed(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetAnimCentered(obj gdx.Object, p_center bool) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetAnimCentered(obj, p_center)
	})
}
func (pself *spriteMgrImpl) IsAnimCentered(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsAnimCentered(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetAnimOffset(obj gdx.Object, p_offset Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetAnimOffset(obj, p_offset)
	})
}
func (pself *spriteMgrImpl) GetAnimOffset(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetAnimOffset(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetAnimFlipH(obj gdx.Object, p_flip bool) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetAnimFlipH(obj, p_flip)
	})
}
func (pself *spriteMgrImpl) IsAnimFlippedH(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsAnimFlippedH(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetAnimFlipV(obj gdx.Object, p_flip bool) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetAnimFlipV(obj, p_flip)
	})
}
func (pself *spriteMgrImpl) IsAnimFlippedV(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsAnimFlippedV(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetVelocity(obj gdx.Object, velocity Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetVelocity(obj, velocity)
	})
}
func (pself *spriteMgrImpl) GetVelocity(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetVelocity(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) IsOnFloor(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsOnFloor(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) IsOnFloorOnly(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsOnFloorOnly(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) IsOnWall(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsOnWall(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) IsOnWallOnly(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsOnWallOnly(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) IsOnCeiling(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsOnCeiling(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) IsOnCeilingOnly(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsOnCeilingOnly(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) GetLastMotion(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetLastMotion(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) GetPositionDelta(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetPositionDelta(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) GetFloorNormal(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetFloorNormal(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) GetWallNormal(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetWallNormal(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) GetRealVelocity(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetRealVelocity(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) MoveAndSlide(obj gdx.Object) {
	callInMainThread(func() {
		gdx.SpriteMgr.MoveAndSlide(obj)
	})
}
func (pself *spriteMgrImpl) SetGravity(obj gdx.Object, gravity float64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetGravity(obj, gravity)
	})
}
func (pself *spriteMgrImpl) GetGravity(obj gdx.Object) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetGravity(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetMass(obj gdx.Object, mass float64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetMass(obj, mass)
	})
}
func (pself *spriteMgrImpl) GetMass(obj gdx.Object) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetMass(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) AddForce(obj gdx.Object, force Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.AddForce(obj, force)
	})
}
func (pself *spriteMgrImpl) AddImpulse(obj gdx.Object, impulse Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.AddImpulse(obj, impulse)
	})
}
func (pself *spriteMgrImpl) SetCollisionLayer(obj gdx.Object, layer int64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetCollisionLayer(obj, layer)
	})
}
func (pself *spriteMgrImpl) GetCollisionLayer(obj gdx.Object) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetCollisionLayer(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetCollisionMask(obj gdx.Object, mask int64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetCollisionMask(obj, mask)
	})
}
func (pself *spriteMgrImpl) GetCollisionMask(obj gdx.Object) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetCollisionMask(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetTriggerLayer(obj gdx.Object, layer int64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetTriggerLayer(obj, layer)
	})
}
func (pself *spriteMgrImpl) GetTriggerLayer(obj gdx.Object) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetTriggerLayer(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetTriggerMask(obj gdx.Object, mask int64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetTriggerMask(obj, mask)
	})
}
func (pself *spriteMgrImpl) GetTriggerMask(obj gdx.Object) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.GetTriggerMask(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetColliderRect(obj gdx.Object, center Vec2, size Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetColliderRect(obj, center, size)
	})
}
func (pself *spriteMgrImpl) SetColliderCircle(obj gdx.Object, center Vec2, radius float64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetColliderCircle(obj, center, radius)
	})
}
func (pself *spriteMgrImpl) SetColliderCapsule(obj gdx.Object, center Vec2, size Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetColliderCapsule(obj, center, size)
	})
}
func (pself *spriteMgrImpl) SetCollisionEnabled(obj gdx.Object, enabled bool) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetCollisionEnabled(obj, enabled)
	})
}
func (pself *spriteMgrImpl) IsCollisionEnabled(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsCollisionEnabled(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) SetTriggerRect(obj gdx.Object, center Vec2, size Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetTriggerRect(obj, center, size)
	})
}
func (pself *spriteMgrImpl) SetTriggerCircle(obj gdx.Object, center Vec2, radius float64) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetTriggerCircle(obj, center, radius)
	})
}
func (pself *spriteMgrImpl) SetTriggerCapsule(obj gdx.Object, center Vec2, size Vec2) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetTriggerCapsule(obj, center, size)
	})
}
func (pself *spriteMgrImpl) SetTriggerEnabled(obj gdx.Object, trigger bool) {
	callInMainThread(func() {
		gdx.SpriteMgr.SetTriggerEnabled(obj, trigger)
	})
}
func (pself *spriteMgrImpl) IsTriggerEnabled(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.IsTriggerEnabled(obj)
	})
	return _ret1
}
func (pself *spriteMgrImpl) CheckCollisionByColor(obj gdx.Object, color Color, color_threshold float64, alpha_threshold float64) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.CheckCollisionByColor(obj, color, color_threshold, alpha_threshold)
	})
	return _ret1
}
func (pself *spriteMgrImpl) CheckCollisionByAlpha(obj gdx.Object, alpha_threshold float64) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.CheckCollisionByAlpha(obj, alpha_threshold)
	})
	return _ret1
}
func (pself *spriteMgrImpl) CheckCollisionWithSpriteByAlpha(obj gdx.Object, obj_b gdx.Object, alpha_threshold float64) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.SpriteMgr.CheckCollisionWithSpriteByAlpha(obj, obj_b, alpha_threshold)
	})
	return _ret1
}

// IUiMgr
func (pself *uiMgrImpl) BindNode(obj gdx.Object, rel_path string) gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.BindNode(obj, rel_path)
	})
	return _ret1
}
func (pself *uiMgrImpl) CreateNode(path string) gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.CreateNode(path)
	})
	return _ret1
}
func (pself *uiMgrImpl) CreateButton(path string, text string) gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.CreateButton(path, text)
	})
	return _ret1
}
func (pself *uiMgrImpl) CreateLabel(path string, text string) gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.CreateLabel(path, text)
	})
	return _ret1
}
func (pself *uiMgrImpl) CreateImage(path string) gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.CreateImage(path)
	})
	return _ret1
}
func (pself *uiMgrImpl) CreateToggle(path string, value bool) gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.CreateToggle(path, value)
	})
	return _ret1
}
func (pself *uiMgrImpl) CreateSlider(path string, value float64) gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.CreateSlider(path, value)
	})
	return _ret1
}
func (pself *uiMgrImpl) CreateInput(path string, text string) gdx.Object {
	var _ret1 gdx.Object
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.CreateInput(path, text)
	})
	return _ret1
}
func (pself *uiMgrImpl) DestroyNode(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.DestroyNode(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) GetType(obj gdx.Object) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetType(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetText(obj gdx.Object, text string) {
	callInMainThread(func() {
		gdx.UiMgr.SetText(obj, text)
	})
}
func (pself *uiMgrImpl) GetText(obj gdx.Object) string {
	var _ret1 string
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetText(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetTexture(obj gdx.Object, path string) {
	callInMainThread(func() {
		gdx.UiMgr.SetTexture(obj, path)
	})
}
func (pself *uiMgrImpl) GetTexture(obj gdx.Object) string {
	var _ret1 string
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetTexture(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetColor(obj gdx.Object, color Color) {
	callInMainThread(func() {
		gdx.UiMgr.SetColor(obj, color)
	})
}
func (pself *uiMgrImpl) GetColor(obj gdx.Object) Color {
	var _ret1 Color
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetColor(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetFontSize(obj gdx.Object, size int64) {
	callInMainThread(func() {
		gdx.UiMgr.SetFontSize(obj, size)
	})
}
func (pself *uiMgrImpl) GetFontSize(obj gdx.Object) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetFontSize(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetVisible(obj gdx.Object, visible bool) {
	callInMainThread(func() {
		gdx.UiMgr.SetVisible(obj, visible)
	})
}
func (pself *uiMgrImpl) GetVisible(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetVisible(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetInteractable(obj gdx.Object, interactable bool) {
	callInMainThread(func() {
		gdx.UiMgr.SetInteractable(obj, interactable)
	})
}
func (pself *uiMgrImpl) GetInteractable(obj gdx.Object) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetInteractable(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetRect(obj gdx.Object, rect Rect2) {
	callInMainThread(func() {
		gdx.UiMgr.SetRect(obj, rect)
	})
}
func (pself *uiMgrImpl) GetRect(obj gdx.Object) Rect2 {
	var _ret1 Rect2
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetRect(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) GetLayoutDirection(obj gdx.Object) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetLayoutDirection(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetLayoutDirection(obj gdx.Object, value int64) {
	callInMainThread(func() {
		gdx.UiMgr.SetLayoutDirection(obj, value)
	})
}
func (pself *uiMgrImpl) GetLayoutMode(obj gdx.Object) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetLayoutMode(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetLayoutMode(obj gdx.Object, value int64) {
	callInMainThread(func() {
		gdx.UiMgr.SetLayoutMode(obj, value)
	})
}
func (pself *uiMgrImpl) GetAnchorsPreset(obj gdx.Object) int64 {
	var _ret1 int64
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetAnchorsPreset(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetAnchorsPreset(obj gdx.Object, value int64) {
	callInMainThread(func() {
		gdx.UiMgr.SetAnchorsPreset(obj, value)
	})
}
func (pself *uiMgrImpl) GetScale(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetScale(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetScale(obj gdx.Object, value Vec2) {
	callInMainThread(func() {
		gdx.UiMgr.SetScale(obj, value)
	})
}
func (pself *uiMgrImpl) GetPosition(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetPosition(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetPosition(obj gdx.Object, value Vec2) {
	callInMainThread(func() {
		gdx.UiMgr.SetPosition(obj, value)
	})
}
func (pself *uiMgrImpl) GetSize(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetSize(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetSize(obj gdx.Object, value Vec2) {
	callInMainThread(func() {
		gdx.UiMgr.SetSize(obj, value)
	})
}
func (pself *uiMgrImpl) GetGlobalPosition(obj gdx.Object) Vec2 {
	var _ret1 Vec2
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetGlobalPosition(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetGlobalPosition(obj gdx.Object, value Vec2) {
	callInMainThread(func() {
		gdx.UiMgr.SetGlobalPosition(obj, value)
	})
}
func (pself *uiMgrImpl) GetRotation(obj gdx.Object) float64 {
	var _ret1 float64
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetRotation(obj)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetRotation(obj gdx.Object, value float64) {
	callInMainThread(func() {
		gdx.UiMgr.SetRotation(obj, value)
	})
}
func (pself *uiMgrImpl) GetFlip(obj gdx.Object, horizontal bool) bool {
	var _ret1 bool
	callInMainThread(func() {
		_ret1 = gdx.UiMgr.GetFlip(obj, horizontal)
	})
	return _ret1
}
func (pself *uiMgrImpl) SetFlip(obj gdx.Object, horizontal bool, is_flip bool) {
	callInMainThread(func() {
		gdx.UiMgr.SetFlip(obj, horizontal, is_flip)
	})
}
