// Code generated by 'go generate'; DO NOT EDIT.

package audiorecord

import (
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modOpenAL32 = syscall.NewLazyDLL("OpenAL32.dll")

	procalcCaptureCloseDevice = modOpenAL32.NewProc("alcCaptureCloseDevice")
	procalcCaptureOpenDevice  = modOpenAL32.NewProc("alcCaptureOpenDevice")
	procalcCaptureSamples     = modOpenAL32.NewProc("alcCaptureSamples")
	procalcCaptureStart       = modOpenAL32.NewProc("alcCaptureStart")
	procalcCaptureStop        = modOpenAL32.NewProc("alcCaptureStop")
	procalcCloseDevice        = modOpenAL32.NewProc("alcCloseDevice")
	procalcCreateContext      = modOpenAL32.NewProc("alcCreateContext")
	procalcGetError           = modOpenAL32.NewProc("alcGetError")
	procalcOpenDevice         = modOpenAL32.NewProc("alcOpenDevice")
)

func alcCaptureCloseDevice(device *ALCdevice) (r bool) {
	r0, _, _ := syscall.Syscall(procalcCaptureCloseDevice.Addr(), 1, uintptr(unsafe.Pointer(device)), 0, 0)
	r = r0 != 0
	return
}

func alcCaptureOpenDevice(devicename *byte, frequency uint32, format uint32, buffersize int32) (r *ALCdevice) {
	r0, _, _ := syscall.Syscall6(procalcCaptureOpenDevice.Addr(), 4, uintptr(unsafe.Pointer(devicename)), uintptr(frequency), uintptr(format), uintptr(buffersize), 0, 0)
	r = (*ALCdevice)(unsafe.Pointer(r0))
	return
}

func alcCaptureSamples(device *ALCdevice, buffer unsafe.Pointer, samples int32) {
	syscall.Syscall(procalcCaptureSamples.Addr(), 3, uintptr(unsafe.Pointer(device)), uintptr(buffer), uintptr(samples))
	return
}

func alcCaptureStart(device *ALCdevice) {
	syscall.Syscall(procalcCaptureStart.Addr(), 1, uintptr(unsafe.Pointer(device)), 0, 0)
	return
}

func alcCaptureStop(device *ALCdevice) {
	syscall.Syscall(procalcCaptureStop.Addr(), 1, uintptr(unsafe.Pointer(device)), 0, 0)
	return
}

func alcCloseDevice(device *ALCdevice) (r bool) {
	r0, _, _ := syscall.Syscall(procalcCloseDevice.Addr(), 1, uintptr(unsafe.Pointer(device)), 0, 0)
	r = r0 != 0
	return
}

func alcCreateContext(device *ALCdevice, attrlist *int32) (r *ALCcontext) {
	r0, _, _ := syscall.Syscall(procalcCreateContext.Addr(), 2, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(attrlist)), 0)
	r = (*ALCcontext)(unsafe.Pointer(r0))
	return
}

func alcGetError(device *ALCdevice) (r uint32) {
	r0, _, _ := syscall.Syscall(procalcGetError.Addr(), 1, uintptr(unsafe.Pointer(device)), 0, 0)
	r = uint32(r0)
	return
}

func alcOpenDevice(devicename *byte) (r *ALCdevice) {
	r0, _, _ := syscall.Syscall(procalcOpenDevice.Addr(), 1, uintptr(unsafe.Pointer(devicename)), 0, 0)
	r = (*ALCdevice)(unsafe.Pointer(r0))
	return
}
