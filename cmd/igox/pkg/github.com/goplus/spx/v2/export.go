// export by github.com/goplus/ixgo/cmd/qexp

package spx

import (
	q "github.com/goplus/spx/v2"

	"go/constant"
	"go/token"
	"reflect"

	"github.com/goplus/ixgo"
)

func init() {
	ixgo.RegisterPackage(&ixgo.Package{
		Name: "spx",
		Path: "github.com/goplus/spx/v2",
		Deps: map[string]string{
			"encoding/json":                     "json",
			"flag":                              "flag",
			"fmt":                               "fmt",
			"github.com/goplus/spx/v2/fs":       "fs",
			"github.com/goplus/spx/v2/fs/asset": "asset",
			"github.com/goplus/spx/v2/fs/zip":   "zip",
			"github.com/goplus/spx/v2/internal/audiorecord":     "audiorecord",
			"github.com/goplus/spx/v2/internal/coroutine":       "coroutine",
			"github.com/goplus/spx/v2/internal/debug":           "debug",
			"github.com/goplus/spx/v2/internal/engine":          "engine",
			"github.com/goplus/spx/v2/internal/engine/platform": "platform",
			"github.com/goplus/spx/v2/internal/engine/profiler": "profiler",
			"github.com/goplus/spx/v2/internal/enginewrap":      "enginewrap",
			"github.com/goplus/spx/v2/internal/time":            "time",
			"github.com/goplus/spx/v2/internal/timer":           "timer",
			"github.com/goplus/spx/v2/internal/tools":           "tools",
			"github.com/goplus/spx/v2/internal/ui":              "ui",
			"github.com/goplus/spx/v2/pkg/gdspx/pkg/engine":     "engine",
			"github.com/realdream-ai/mathf":                     "mathf",
			"image/jpeg":                                        "jpeg",
			"image/png":                                         "png",
			"io":                                                "io",
			"log":                                               "log",
			"maps":                                              "maps",
			"math":                                              "math",
			"math/rand":                                         "rand",
			"os":                                                "os",
			"path":                                              "path",
			"path/filepath":                                     "filepath",
			"reflect":                                           "reflect",
			"strconv":                                           "strconv",
			"strings":                                           "strings",
			"sync":                                              "sync",
			"syscall":                                           "syscall",
			"time":                                              "time",
			"unsafe":                                            "unsafe",
		},
		Interfaces: map[string]reflect.Type{
			"Gamer":       reflect.TypeOf((*q.Gamer)(nil)).Elem(),
			"IEventSinks": reflect.TypeOf((*q.IEventSinks)(nil)).Elem(),
			"Shape":       reflect.TypeOf((*q.Shape)(nil)).Elem(),
			"ShapeGetter": reflect.TypeOf((*q.ShapeGetter)(nil)).Elem(),
			"Sprite":      reflect.TypeOf((*q.Sprite)(nil)).Elem(),
			"Widget":      reflect.TypeOf((*q.Widget)(nil)).Elem(),
		},
		NamedTypes: map[string]reflect.Type{
			"Camera":          reflect.TypeOf((*q.Camera)(nil)).Elem(),
			"Color":           reflect.TypeOf((*q.Color)(nil)).Elem(),
			"Config":          reflect.TypeOf((*q.Config)(nil)).Elem(),
			"EffectKind":      reflect.TypeOf((*q.EffectKind)(nil)).Elem(),
			"Game":            reflect.TypeOf((*q.Game)(nil)).Elem(),
			"List":            reflect.TypeOf((*q.List)(nil)).Elem(),
			"Monitor":         reflect.TypeOf((*q.Monitor)(nil)).Elem(),
			"MovingInfo":      reflect.TypeOf((*q.MovingInfo)(nil)).Elem(),
			"PenColorParam":   reflect.TypeOf((*q.PenColorParam)(nil)).Elem(),
			"PlayAction":      reflect.TypeOf((*q.PlayAction)(nil)).Elem(),
			"PlayOptions":     reflect.TypeOf((*q.PlayOptions)(nil)).Elem(),
			"RotationStyle":   reflect.TypeOf((*q.RotationStyle)(nil)).Elem(),
			"Sound":           reflect.TypeOf((*q.Sound)(nil)).Elem(),
			"SoundEffectKind": reflect.TypeOf((*q.SoundEffectKind)(nil)).Elem(),
			"SpriteImpl":      reflect.TypeOf((*q.SpriteImpl)(nil)).Elem(),
			"StopKind":        reflect.TypeOf((*q.StopKind)(nil)).Elem(),
			"TurningInfo":     reflect.TypeOf((*q.TurningInfo)(nil)).Elem(),
			"Value":           reflect.TypeOf((*q.Value)(nil)).Elem(),
		},
		AliasTypes: map[string]reflect.Type{
			"BackdropName":        reflect.TypeOf((*q.BackdropName)(nil)).Elem(),
			"Direction":           reflect.TypeOf((*q.Direction)(nil)).Elem(),
			"Key":                 reflect.TypeOf((*q.Key)(nil)).Elem(),
			"Pos":                 reflect.TypeOf((*q.Pos)(nil)).Elem(),
			"SoundName":           reflect.TypeOf((*q.SoundName)(nil)).Elem(),
			"SpriteAnimationName": reflect.TypeOf((*q.SpriteAnimationName)(nil)).Elem(),
			"SpriteCostumeName":   reflect.TypeOf((*q.SpriteCostumeName)(nil)).Elem(),
			"SpriteName":          reflect.TypeOf((*q.SpriteName)(nil)).Elem(),
			"WidgetName":          reflect.TypeOf((*q.WidgetName)(nil)).Elem(),
		},
		Vars: map[string]reflect.Value{},
		Funcs: map[string]reflect.Value{
			"Exit__0":                  reflect.ValueOf(q.Exit__0),
			"Exit__1":                  reflect.ValueOf(q.Exit__1),
			"Forever":                  reflect.ValueOf(q.Forever),
			"GetWidget_":               reflect.ValueOf(q.GetWidget_),
			"Gopt_Game_Main":           reflect.ValueOf(q.Gopt_Game_Main),
			"Gopt_Game_Reload":         reflect.ValueOf(q.Gopt_Game_Reload),
			"Gopt_Game_Run":            reflect.ValueOf(q.Gopt_Game_Run),
			"Gopt_SpriteImpl_Clone__0": reflect.ValueOf(q.Gopt_SpriteImpl_Clone__0),
			"Gopt_SpriteImpl_Clone__1": reflect.ValueOf(q.Gopt_SpriteImpl_Clone__1),
			"HSB":                      reflect.ValueOf(q.HSB),
			"HSBA":                     reflect.ValueOf(q.HSBA),
			"Iround":                   reflect.ValueOf(q.Iround),
			"Rand__0":                  reflect.ValueOf(q.Rand__0),
			"Rand__1":                  reflect.ValueOf(q.Rand__1),
			"Repeat":                   reflect.ValueOf(q.Repeat),
			"RepeatUntil":              reflect.ValueOf(q.RepeatUntil),
			"Sched":                    reflect.ValueOf(q.Sched),
			"SchedNow":                 reflect.ValueOf(q.SchedNow),
			"SetDebug":                 reflect.ValueOf(q.SetDebug),
			"WaitUntil":                reflect.ValueOf(q.WaitUntil),
		},
		TypedConsts: map[string]ixgo.TypedConst{
			"AllOtherScripts":      {reflect.TypeOf(q.AllOtherScripts), constant.MakeInt64(int64(q.AllOtherScripts))},
			"AllSprites":           {reflect.TypeOf(q.AllSprites), constant.MakeInt64(int64(q.AllSprites))},
			"AnimChannelFrame":     {reflect.TypeOf(q.AnimChannelFrame), constant.MakeString(string(q.AnimChannelFrame))},
			"AnimChannelGlide":     {reflect.TypeOf(q.AnimChannelGlide), constant.MakeString(string(q.AnimChannelGlide))},
			"AnimChannelMove":      {reflect.TypeOf(q.AnimChannelMove), constant.MakeString(string(q.AnimChannelMove))},
			"AnimChannelTurn":      {reflect.TypeOf(q.AnimChannelTurn), constant.MakeString(string(q.AnimChannelTurn))},
			"BrightnessEffect":     {reflect.TypeOf(q.BrightnessEffect), constant.MakeInt64(int64(q.BrightnessEffect))},
			"ColorEffect":          {reflect.TypeOf(q.ColorEffect), constant.MakeInt64(int64(q.ColorEffect))},
			"DbgFlagAll":           {reflect.TypeOf(q.DbgFlagAll), constant.MakeInt64(int64(q.DbgFlagAll))},
			"DbgFlagEvent":         {reflect.TypeOf(q.DbgFlagEvent), constant.MakeInt64(int64(q.DbgFlagEvent))},
			"DbgFlagInstr":         {reflect.TypeOf(q.DbgFlagInstr), constant.MakeInt64(int64(q.DbgFlagInstr))},
			"DbgFlagLoad":          {reflect.TypeOf(q.DbgFlagLoad), constant.MakeInt64(int64(q.DbgFlagLoad))},
			"DbgFlagPerf":          {reflect.TypeOf(q.DbgFlagPerf), constant.MakeInt64(int64(q.DbgFlagPerf))},
			"Down":                 {reflect.TypeOf(q.Down), constant.MakeFromLiteral("1.8e+2", token.FLOAT, 0)},
			"Edge":                 {reflect.TypeOf(q.Edge), constant.MakeInt64(int64(q.Edge))},
			"EdgeBottom":           {reflect.TypeOf(q.EdgeBottom), constant.MakeInt64(int64(q.EdgeBottom))},
			"EdgeLeft":             {reflect.TypeOf(q.EdgeLeft), constant.MakeInt64(int64(q.EdgeLeft))},
			"EdgeRight":            {reflect.TypeOf(q.EdgeRight), constant.MakeInt64(int64(q.EdgeRight))},
			"EdgeTop":              {reflect.TypeOf(q.EdgeTop), constant.MakeInt64(int64(q.EdgeTop))},
			"FishEyeEffect":        {reflect.TypeOf(q.FishEyeEffect), constant.MakeInt64(int64(q.FishEyeEffect))},
			"GhostEffect":          {reflect.TypeOf(q.GhostEffect), constant.MakeInt64(int64(q.GhostEffect))},
			"Invalid":              {reflect.TypeOf(q.Invalid), constant.MakeInt64(int64(q.Invalid))},
			"Key0":                 {reflect.TypeOf(q.Key0), constant.MakeInt64(int64(q.Key0))},
			"Key1":                 {reflect.TypeOf(q.Key1), constant.MakeInt64(int64(q.Key1))},
			"Key2":                 {reflect.TypeOf(q.Key2), constant.MakeInt64(int64(q.Key2))},
			"Key3":                 {reflect.TypeOf(q.Key3), constant.MakeInt64(int64(q.Key3))},
			"Key4":                 {reflect.TypeOf(q.Key4), constant.MakeInt64(int64(q.Key4))},
			"Key5":                 {reflect.TypeOf(q.Key5), constant.MakeInt64(int64(q.Key5))},
			"Key6":                 {reflect.TypeOf(q.Key6), constant.MakeInt64(int64(q.Key6))},
			"Key7":                 {reflect.TypeOf(q.Key7), constant.MakeInt64(int64(q.Key7))},
			"Key8":                 {reflect.TypeOf(q.Key8), constant.MakeInt64(int64(q.Key8))},
			"Key9":                 {reflect.TypeOf(q.Key9), constant.MakeInt64(int64(q.Key9))},
			"KeyA":                 {reflect.TypeOf(q.KeyA), constant.MakeInt64(int64(q.KeyA))},
			"KeyAlt":               {reflect.TypeOf(q.KeyAlt), constant.MakeInt64(int64(q.KeyAlt))},
			"KeyAny":               {reflect.TypeOf(q.KeyAny), constant.MakeInt64(int64(q.KeyAny))},
			"KeyApostrophe":        {reflect.TypeOf(q.KeyApostrophe), constant.MakeInt64(int64(q.KeyApostrophe))},
			"KeyB":                 {reflect.TypeOf(q.KeyB), constant.MakeInt64(int64(q.KeyB))},
			"KeyBackslash":         {reflect.TypeOf(q.KeyBackslash), constant.MakeInt64(int64(q.KeyBackslash))},
			"KeyBackspace":         {reflect.TypeOf(q.KeyBackspace), constant.MakeInt64(int64(q.KeyBackspace))},
			"KeyC":                 {reflect.TypeOf(q.KeyC), constant.MakeInt64(int64(q.KeyC))},
			"KeyCapsLock":          {reflect.TypeOf(q.KeyCapsLock), constant.MakeInt64(int64(q.KeyCapsLock))},
			"KeyComma":             {reflect.TypeOf(q.KeyComma), constant.MakeInt64(int64(q.KeyComma))},
			"KeyControl":           {reflect.TypeOf(q.KeyControl), constant.MakeInt64(int64(q.KeyControl))},
			"KeyD":                 {reflect.TypeOf(q.KeyD), constant.MakeInt64(int64(q.KeyD))},
			"KeyDelete":            {reflect.TypeOf(q.KeyDelete), constant.MakeInt64(int64(q.KeyDelete))},
			"KeyDown":              {reflect.TypeOf(q.KeyDown), constant.MakeInt64(int64(q.KeyDown))},
			"KeyE":                 {reflect.TypeOf(q.KeyE), constant.MakeInt64(int64(q.KeyE))},
			"KeyEnd":               {reflect.TypeOf(q.KeyEnd), constant.MakeInt64(int64(q.KeyEnd))},
			"KeyEnter":             {reflect.TypeOf(q.KeyEnter), constant.MakeInt64(int64(q.KeyEnter))},
			"KeyEqual":             {reflect.TypeOf(q.KeyEqual), constant.MakeInt64(int64(q.KeyEqual))},
			"KeyEscape":            {reflect.TypeOf(q.KeyEscape), constant.MakeInt64(int64(q.KeyEscape))},
			"KeyF":                 {reflect.TypeOf(q.KeyF), constant.MakeInt64(int64(q.KeyF))},
			"KeyF1":                {reflect.TypeOf(q.KeyF1), constant.MakeInt64(int64(q.KeyF1))},
			"KeyF10":               {reflect.TypeOf(q.KeyF10), constant.MakeInt64(int64(q.KeyF10))},
			"KeyF11":               {reflect.TypeOf(q.KeyF11), constant.MakeInt64(int64(q.KeyF11))},
			"KeyF12":               {reflect.TypeOf(q.KeyF12), constant.MakeInt64(int64(q.KeyF12))},
			"KeyF2":                {reflect.TypeOf(q.KeyF2), constant.MakeInt64(int64(q.KeyF2))},
			"KeyF3":                {reflect.TypeOf(q.KeyF3), constant.MakeInt64(int64(q.KeyF3))},
			"KeyF4":                {reflect.TypeOf(q.KeyF4), constant.MakeInt64(int64(q.KeyF4))},
			"KeyF5":                {reflect.TypeOf(q.KeyF5), constant.MakeInt64(int64(q.KeyF5))},
			"KeyF6":                {reflect.TypeOf(q.KeyF6), constant.MakeInt64(int64(q.KeyF6))},
			"KeyF7":                {reflect.TypeOf(q.KeyF7), constant.MakeInt64(int64(q.KeyF7))},
			"KeyF8":                {reflect.TypeOf(q.KeyF8), constant.MakeInt64(int64(q.KeyF8))},
			"KeyF9":                {reflect.TypeOf(q.KeyF9), constant.MakeInt64(int64(q.KeyF9))},
			"KeyG":                 {reflect.TypeOf(q.KeyG), constant.MakeInt64(int64(q.KeyG))},
			"KeyGraveAccent":       {reflect.TypeOf(q.KeyGraveAccent), constant.MakeInt64(int64(q.KeyGraveAccent))},
			"KeyH":                 {reflect.TypeOf(q.KeyH), constant.MakeInt64(int64(q.KeyH))},
			"KeyHome":              {reflect.TypeOf(q.KeyHome), constant.MakeInt64(int64(q.KeyHome))},
			"KeyI":                 {reflect.TypeOf(q.KeyI), constant.MakeInt64(int64(q.KeyI))},
			"KeyInsert":            {reflect.TypeOf(q.KeyInsert), constant.MakeInt64(int64(q.KeyInsert))},
			"KeyJ":                 {reflect.TypeOf(q.KeyJ), constant.MakeInt64(int64(q.KeyJ))},
			"KeyK":                 {reflect.TypeOf(q.KeyK), constant.MakeInt64(int64(q.KeyK))},
			"KeyKP0":               {reflect.TypeOf(q.KeyKP0), constant.MakeInt64(int64(q.KeyKP0))},
			"KeyKP1":               {reflect.TypeOf(q.KeyKP1), constant.MakeInt64(int64(q.KeyKP1))},
			"KeyKP2":               {reflect.TypeOf(q.KeyKP2), constant.MakeInt64(int64(q.KeyKP2))},
			"KeyKP3":               {reflect.TypeOf(q.KeyKP3), constant.MakeInt64(int64(q.KeyKP3))},
			"KeyKP4":               {reflect.TypeOf(q.KeyKP4), constant.MakeInt64(int64(q.KeyKP4))},
			"KeyKP5":               {reflect.TypeOf(q.KeyKP5), constant.MakeInt64(int64(q.KeyKP5))},
			"KeyKP6":               {reflect.TypeOf(q.KeyKP6), constant.MakeInt64(int64(q.KeyKP6))},
			"KeyKP7":               {reflect.TypeOf(q.KeyKP7), constant.MakeInt64(int64(q.KeyKP7))},
			"KeyKP8":               {reflect.TypeOf(q.KeyKP8), constant.MakeInt64(int64(q.KeyKP8))},
			"KeyKP9":               {reflect.TypeOf(q.KeyKP9), constant.MakeInt64(int64(q.KeyKP9))},
			"KeyKPDecimal":         {reflect.TypeOf(q.KeyKPDecimal), constant.MakeInt64(int64(q.KeyKPDecimal))},
			"KeyKPDivide":          {reflect.TypeOf(q.KeyKPDivide), constant.MakeInt64(int64(q.KeyKPDivide))},
			"KeyKPEnter":           {reflect.TypeOf(q.KeyKPEnter), constant.MakeInt64(int64(q.KeyKPEnter))},
			"KeyKPEqual":           {reflect.TypeOf(q.KeyKPEqual), constant.MakeInt64(int64(q.KeyKPEqual))},
			"KeyKPMultiply":        {reflect.TypeOf(q.KeyKPMultiply), constant.MakeInt64(int64(q.KeyKPMultiply))},
			"KeyKPSubtract":        {reflect.TypeOf(q.KeyKPSubtract), constant.MakeInt64(int64(q.KeyKPSubtract))},
			"KeyL":                 {reflect.TypeOf(q.KeyL), constant.MakeInt64(int64(q.KeyL))},
			"KeyLeft":              {reflect.TypeOf(q.KeyLeft), constant.MakeInt64(int64(q.KeyLeft))},
			"KeyLeftBracket":       {reflect.TypeOf(q.KeyLeftBracket), constant.MakeInt64(int64(q.KeyLeftBracket))},
			"KeyM":                 {reflect.TypeOf(q.KeyM), constant.MakeInt64(int64(q.KeyM))},
			"KeyMax":               {reflect.TypeOf(q.KeyMax), constant.MakeInt64(int64(q.KeyMax))},
			"KeyMenu":              {reflect.TypeOf(q.KeyMenu), constant.MakeInt64(int64(q.KeyMenu))},
			"KeyMinus":             {reflect.TypeOf(q.KeyMinus), constant.MakeInt64(int64(q.KeyMinus))},
			"KeyN":                 {reflect.TypeOf(q.KeyN), constant.MakeInt64(int64(q.KeyN))},
			"KeyNumLock":           {reflect.TypeOf(q.KeyNumLock), constant.MakeInt64(int64(q.KeyNumLock))},
			"KeyO":                 {reflect.TypeOf(q.KeyO), constant.MakeInt64(int64(q.KeyO))},
			"KeyP":                 {reflect.TypeOf(q.KeyP), constant.MakeInt64(int64(q.KeyP))},
			"KeyPageDown":          {reflect.TypeOf(q.KeyPageDown), constant.MakeInt64(int64(q.KeyPageDown))},
			"KeyPageUp":            {reflect.TypeOf(q.KeyPageUp), constant.MakeInt64(int64(q.KeyPageUp))},
			"KeyPause":             {reflect.TypeOf(q.KeyPause), constant.MakeInt64(int64(q.KeyPause))},
			"KeyPeriod":            {reflect.TypeOf(q.KeyPeriod), constant.MakeInt64(int64(q.KeyPeriod))},
			"KeyPrintScreen":       {reflect.TypeOf(q.KeyPrintScreen), constant.MakeInt64(int64(q.KeyPrintScreen))},
			"KeyQ":                 {reflect.TypeOf(q.KeyQ), constant.MakeInt64(int64(q.KeyQ))},
			"KeyR":                 {reflect.TypeOf(q.KeyR), constant.MakeInt64(int64(q.KeyR))},
			"KeyRight":             {reflect.TypeOf(q.KeyRight), constant.MakeInt64(int64(q.KeyRight))},
			"KeyRightBracket":      {reflect.TypeOf(q.KeyRightBracket), constant.MakeInt64(int64(q.KeyRightBracket))},
			"KeyS":                 {reflect.TypeOf(q.KeyS), constant.MakeInt64(int64(q.KeyS))},
			"KeyScrollLock":        {reflect.TypeOf(q.KeyScrollLock), constant.MakeInt64(int64(q.KeyScrollLock))},
			"KeySemicolon":         {reflect.TypeOf(q.KeySemicolon), constant.MakeInt64(int64(q.KeySemicolon))},
			"KeyShift":             {reflect.TypeOf(q.KeyShift), constant.MakeInt64(int64(q.KeyShift))},
			"KeySlash":             {reflect.TypeOf(q.KeySlash), constant.MakeInt64(int64(q.KeySlash))},
			"KeySpace":             {reflect.TypeOf(q.KeySpace), constant.MakeInt64(int64(q.KeySpace))},
			"KeyT":                 {reflect.TypeOf(q.KeyT), constant.MakeInt64(int64(q.KeyT))},
			"KeyTab":               {reflect.TypeOf(q.KeyTab), constant.MakeInt64(int64(q.KeyTab))},
			"KeyU":                 {reflect.TypeOf(q.KeyU), constant.MakeInt64(int64(q.KeyU))},
			"KeyUp":                {reflect.TypeOf(q.KeyUp), constant.MakeInt64(int64(q.KeyUp))},
			"KeyV":                 {reflect.TypeOf(q.KeyV), constant.MakeInt64(int64(q.KeyV))},
			"KeyW":                 {reflect.TypeOf(q.KeyW), constant.MakeInt64(int64(q.KeyW))},
			"KeyX":                 {reflect.TypeOf(q.KeyX), constant.MakeInt64(int64(q.KeyX))},
			"KeyY":                 {reflect.TypeOf(q.KeyY), constant.MakeInt64(int64(q.KeyY))},
			"KeyZ":                 {reflect.TypeOf(q.KeyZ), constant.MakeInt64(int64(q.KeyZ))},
			"Last":                 {reflect.TypeOf(q.Last), constant.MakeInt64(int64(q.Last))},
			"Left":                 {reflect.TypeOf(q.Left), constant.MakeFromLiteral("-.9e+2", token.FLOAT, 0)},
			"LeftRight":            {reflect.TypeOf(q.LeftRight), constant.MakeInt64(int64(q.LeftRight))},
			"MOUSE_BUTTON_LEFT":    {reflect.TypeOf(q.MOUSE_BUTTON_LEFT), constant.MakeInt64(int64(q.MOUSE_BUTTON_LEFT))},
			"MOUSE_BUTTON_MIDDLE":  {reflect.TypeOf(q.MOUSE_BUTTON_MIDDLE), constant.MakeInt64(int64(q.MOUSE_BUTTON_MIDDLE))},
			"MOUSE_BUTTON_RIGHT":   {reflect.TypeOf(q.MOUSE_BUTTON_RIGHT), constant.MakeInt64(int64(q.MOUSE_BUTTON_RIGHT))},
			"MosaicEffect":         {reflect.TypeOf(q.MosaicEffect), constant.MakeInt64(int64(q.MosaicEffect))},
			"Mouse":                {reflect.TypeOf(q.Mouse), constant.MakeInt64(int64(q.Mouse))},
			"Next":                 {reflect.TypeOf(q.Next), constant.MakeInt64(int64(q.Next))},
			"None":                 {reflect.TypeOf(q.None), constant.MakeInt64(int64(q.None))},
			"Normal":               {reflect.TypeOf(q.Normal), constant.MakeInt64(int64(q.Normal))},
			"OtherScriptsInSprite": {reflect.TypeOf(q.OtherScriptsInSprite), constant.MakeInt64(int64(q.OtherScriptsInSprite))},
			"PenBrightness":        {reflect.TypeOf(q.PenBrightness), constant.MakeInt64(int64(q.PenBrightness))},
			"PenHue":               {reflect.TypeOf(q.PenHue), constant.MakeInt64(int64(q.PenHue))},
			"PenSaturation":        {reflect.TypeOf(q.PenSaturation), constant.MakeInt64(int64(q.PenSaturation))},
			"PenTransparency":      {reflect.TypeOf(q.PenTransparency), constant.MakeInt64(int64(q.PenTransparency))},
			"PixelateEffect":       {reflect.TypeOf(q.PixelateEffect), constant.MakeInt64(int64(q.PixelateEffect))},
			"PlayContinue":         {reflect.TypeOf(q.PlayContinue), constant.MakeInt64(int64(q.PlayContinue))},
			"PlayPause":            {reflect.TypeOf(q.PlayPause), constant.MakeInt64(int64(q.PlayPause))},
			"PlayResume":           {reflect.TypeOf(q.PlayResume), constant.MakeInt64(int64(q.PlayResume))},
			"PlayRewind":           {reflect.TypeOf(q.PlayRewind), constant.MakeInt64(int64(q.PlayRewind))},
			"PlayStop":             {reflect.TypeOf(q.PlayStop), constant.MakeInt64(int64(q.PlayStop))},
			"Prev":                 {reflect.TypeOf(q.Prev), constant.MakeInt64(int64(q.Prev))},
			"Random":               {reflect.TypeOf(q.Random), constant.MakeInt64(int64(q.Random))},
			"Right":                {reflect.TypeOf(q.Right), constant.MakeFromLiteral("9.e+1", token.FLOAT, 0)},
			"SoundPanEffect":       {reflect.TypeOf(q.SoundPanEffect), constant.MakeInt64(int64(q.SoundPanEffect))},
			"SoundPitchEffect":     {reflect.TypeOf(q.SoundPitchEffect), constant.MakeInt64(int64(q.SoundPitchEffect))},
			"StateDie":             {reflect.TypeOf(q.StateDie), constant.MakeString(string(q.StateDie))},
			"StateGlide":           {reflect.TypeOf(q.StateGlide), constant.MakeString(string(q.StateGlide))},
			"StateStep":            {reflect.TypeOf(q.StateStep), constant.MakeString(string(q.StateStep))},
			"StateTurn":            {reflect.TypeOf(q.StateTurn), constant.MakeString(string(q.StateTurn))},
			"ThisScript":           {reflect.TypeOf(q.ThisScript), constant.MakeInt64(int64(q.ThisScript))},
			"ThisSprite":           {reflect.TypeOf(q.ThisSprite), constant.MakeInt64(int64(q.ThisSprite))},
			"Up":                   {reflect.TypeOf(q.Up), constant.MakeFromLiteral("0", token.FLOAT, 0)},
			"WhirlEffect":          {reflect.TypeOf(q.WhirlEffect), constant.MakeInt64(int64(q.WhirlEffect))},
		},
		UntypedConsts: map[string]ixgo.UntypedConst{
			"All":        {"untyped int", constant.MakeInt64(int64(q.All))},
			"GopPackage": {"untyped bool", constant.MakeBool(bool(q.GopPackage))},
			"Gop_sched":  {"untyped string", constant.MakeString(string(q.Gop_sched))},
		},
	})
}
