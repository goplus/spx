// export by github.com/goplus/igop/cmd/qexp

package spx

import (
	q "github.com/goplus/spx"

	"go/constant"
	"reflect"

	"github.com/goplus/igop"
)

func init() {
	igop.RegisterPackage(&igop.Package{
		Name: "spx",
		Path: "github.com/goplus/spx",
		Deps: map[string]string{
			"encoding/json":                  "json",
			"flag":                           "flag",
			"fmt":                            "fmt",
			"github.com/goplus/spx/fs":       "fs",
			"github.com/goplus/spx/fs/asset": "asset",
			"github.com/goplus/spx/fs/zip":   "zip",
			"github.com/goplus/spx/internal/audiorecord": "audiorecord",
			"github.com/goplus/spx/internal/coroutine":   "coroutine",
			"github.com/goplus/spx/internal/engine":      "engine",
			"github.com/goplus/spx/internal/enginewrap":  "enginewrap",
			"github.com/goplus/spx/internal/time":        "time",
			"github.com/goplus/spx/internal/tools":       "tools",
			"github.com/goplus/spx/internal/ui":          "ui",
			"github.com/goplus/spx/pkg/gdspx/pkg/engine": "engine",
			"github.com/realdream-ai/mathf":              "mathf",
			"image/jpeg":                                 "jpeg",
			"image/png":                                  "png",
			"io":                                         "io",
			"log":                                        "log",
			"math":                                       "math",
			"math/rand":                                  "rand",
			"os":                                         "os",
			"path":                                       "path",
			"path/filepath":                              "filepath",
			"reflect":                                    "reflect",
			"strconv":                                    "strconv",
			"strings":                                    "strings",
			"sync":                                       "sync",
			"syscall":                                    "syscall",
			"time":                                       "time",
			"unsafe":                                     "unsafe",
		},
		Interfaces: map[string]reflect.Type{
			"Gamer":       reflect.TypeOf((*q.Gamer)(nil)).Elem(),
			"IEventSinks": reflect.TypeOf((*q.IEventSinks)(nil)).Elem(),
			"Shape":       reflect.TypeOf((*q.Shape)(nil)).Elem(),
			"ShapeGetter": reflect.TypeOf((*q.ShapeGetter)(nil)).Elem(),
			"Sprite":      reflect.TypeOf((*q.Sprite)(nil)).Elem(),
			"Widget":      reflect.TypeOf((*q.Widget)(nil)).Elem(),
		},
		NamedTypes: map[string]reflect.Type{
			"BackdropName":    reflect.TypeOf((*q.BackdropName)(nil)).Elem(),
			"Camera":          reflect.TypeOf((*q.Camera)(nil)).Elem(),
			"Config":          reflect.TypeOf((*q.Config)(nil)).Elem(),
			"EffectKind":      reflect.TypeOf((*q.EffectKind)(nil)).Elem(),
			"Game":            reflect.TypeOf((*q.Game)(nil)).Elem(),
			"List":            reflect.TypeOf((*q.List)(nil)).Elem(),
			"Monitor":         reflect.TypeOf((*q.Monitor)(nil)).Elem(),
			"MovingInfo":      reflect.TypeOf((*q.MovingInfo)(nil)).Elem(),
			"PlayAction":      reflect.TypeOf((*q.PlayAction)(nil)).Elem(),
			"PlayOptions":     reflect.TypeOf((*q.PlayOptions)(nil)).Elem(),
			"RotationStyle":   reflect.TypeOf((*q.RotationStyle)(nil)).Elem(),
			"Sound":           reflect.TypeOf((*q.Sound)(nil)).Elem(),
			"SoundEffectKind": reflect.TypeOf((*q.SoundEffectKind)(nil)).Elem(),
			"SpriteImpl":      reflect.TypeOf((*q.SpriteImpl)(nil)).Elem(),
			"StopKind":        reflect.TypeOf((*q.StopKind)(nil)).Elem(),
			"TurningInfo":     reflect.TypeOf((*q.TurningInfo)(nil)).Elem(),
			"Value":           reflect.TypeOf((*q.Value)(nil)).Elem(),
		},
		AliasTypes: map[string]reflect.Type{
			"Color":               reflect.TypeOf((*q.Color)(nil)).Elem(),
			"Key":                 reflect.TypeOf((*int64)(nil)).Elem(),
			"Pos":                 reflect.TypeOf((*int)(nil)).Elem(),
			"SoundName":           reflect.TypeOf((*string)(nil)).Elem(),
			"SpriteAnimationName": reflect.TypeOf((*string)(nil)).Elem(),
			"SpriteCostumeName":   reflect.TypeOf((*string)(nil)).Elem(),
			"SpriteName":          reflect.TypeOf((*string)(nil)).Elem(),
			"WidgetName":          reflect.TypeOf((*string)(nil)).Elem(),
		},
		Vars: map[string]reflect.Value{
			"Key0":            reflect.ValueOf(&q.Key0),
			"Key1":            reflect.ValueOf(&q.Key1),
			"Key2":            reflect.ValueOf(&q.Key2),
			"Key3":            reflect.ValueOf(&q.Key3),
			"Key4":            reflect.ValueOf(&q.Key4),
			"Key5":            reflect.ValueOf(&q.Key5),
			"Key6":            reflect.ValueOf(&q.Key6),
			"Key7":            reflect.ValueOf(&q.Key7),
			"Key8":            reflect.ValueOf(&q.Key8),
			"Key9":            reflect.ValueOf(&q.Key9),
			"KeyA":            reflect.ValueOf(&q.KeyA),
			"KeyAlt":          reflect.ValueOf(&q.KeyAlt),
			"KeyAny":          reflect.ValueOf(&q.KeyAny),
			"KeyApostrophe":   reflect.ValueOf(&q.KeyApostrophe),
			"KeyB":            reflect.ValueOf(&q.KeyB),
			"KeyBackslash":    reflect.ValueOf(&q.KeyBackslash),
			"KeyBackspace":    reflect.ValueOf(&q.KeyBackspace),
			"KeyC":            reflect.ValueOf(&q.KeyC),
			"KeyCapsLock":     reflect.ValueOf(&q.KeyCapsLock),
			"KeyComma":        reflect.ValueOf(&q.KeyComma),
			"KeyControl":      reflect.ValueOf(&q.KeyControl),
			"KeyD":            reflect.ValueOf(&q.KeyD),
			"KeyDelete":       reflect.ValueOf(&q.KeyDelete),
			"KeyDown":         reflect.ValueOf(&q.KeyDown),
			"KeyE":            reflect.ValueOf(&q.KeyE),
			"KeyEnd":          reflect.ValueOf(&q.KeyEnd),
			"KeyEnter":        reflect.ValueOf(&q.KeyEnter),
			"KeyEqual":        reflect.ValueOf(&q.KeyEqual),
			"KeyEscape":       reflect.ValueOf(&q.KeyEscape),
			"KeyF":            reflect.ValueOf(&q.KeyF),
			"KeyF1":           reflect.ValueOf(&q.KeyF1),
			"KeyF10":          reflect.ValueOf(&q.KeyF10),
			"KeyF11":          reflect.ValueOf(&q.KeyF11),
			"KeyF12":          reflect.ValueOf(&q.KeyF12),
			"KeyF2":           reflect.ValueOf(&q.KeyF2),
			"KeyF3":           reflect.ValueOf(&q.KeyF3),
			"KeyF4":           reflect.ValueOf(&q.KeyF4),
			"KeyF5":           reflect.ValueOf(&q.KeyF5),
			"KeyF6":           reflect.ValueOf(&q.KeyF6),
			"KeyF7":           reflect.ValueOf(&q.KeyF7),
			"KeyF8":           reflect.ValueOf(&q.KeyF8),
			"KeyF9":           reflect.ValueOf(&q.KeyF9),
			"KeyG":            reflect.ValueOf(&q.KeyG),
			"KeyGraveAccent":  reflect.ValueOf(&q.KeyGraveAccent),
			"KeyH":            reflect.ValueOf(&q.KeyH),
			"KeyHome":         reflect.ValueOf(&q.KeyHome),
			"KeyI":            reflect.ValueOf(&q.KeyI),
			"KeyInsert":       reflect.ValueOf(&q.KeyInsert),
			"KeyJ":            reflect.ValueOf(&q.KeyJ),
			"KeyK":            reflect.ValueOf(&q.KeyK),
			"KeyKP0":          reflect.ValueOf(&q.KeyKP0),
			"KeyKP1":          reflect.ValueOf(&q.KeyKP1),
			"KeyKP2":          reflect.ValueOf(&q.KeyKP2),
			"KeyKP3":          reflect.ValueOf(&q.KeyKP3),
			"KeyKP4":          reflect.ValueOf(&q.KeyKP4),
			"KeyKP5":          reflect.ValueOf(&q.KeyKP5),
			"KeyKP6":          reflect.ValueOf(&q.KeyKP6),
			"KeyKP7":          reflect.ValueOf(&q.KeyKP7),
			"KeyKP8":          reflect.ValueOf(&q.KeyKP8),
			"KeyKP9":          reflect.ValueOf(&q.KeyKP9),
			"KeyKPDecimal":    reflect.ValueOf(&q.KeyKPDecimal),
			"KeyKPDivide":     reflect.ValueOf(&q.KeyKPDivide),
			"KeyKPEnter":      reflect.ValueOf(&q.KeyKPEnter),
			"KeyKPEqual":      reflect.ValueOf(&q.KeyKPEqual),
			"KeyKPMultiply":   reflect.ValueOf(&q.KeyKPMultiply),
			"KeyKPSubtract":   reflect.ValueOf(&q.KeyKPSubtract),
			"KeyL":            reflect.ValueOf(&q.KeyL),
			"KeyLeft":         reflect.ValueOf(&q.KeyLeft),
			"KeyLeftBracket":  reflect.ValueOf(&q.KeyLeftBracket),
			"KeyM":            reflect.ValueOf(&q.KeyM),
			"KeyMax":          reflect.ValueOf(&q.KeyMax),
			"KeyMenu":         reflect.ValueOf(&q.KeyMenu),
			"KeyMinus":        reflect.ValueOf(&q.KeyMinus),
			"KeyN":            reflect.ValueOf(&q.KeyN),
			"KeyNumLock":      reflect.ValueOf(&q.KeyNumLock),
			"KeyO":            reflect.ValueOf(&q.KeyO),
			"KeyP":            reflect.ValueOf(&q.KeyP),
			"KeyPageDown":     reflect.ValueOf(&q.KeyPageDown),
			"KeyPageUp":       reflect.ValueOf(&q.KeyPageUp),
			"KeyPause":        reflect.ValueOf(&q.KeyPause),
			"KeyPeriod":       reflect.ValueOf(&q.KeyPeriod),
			"KeyPrintScreen":  reflect.ValueOf(&q.KeyPrintScreen),
			"KeyQ":            reflect.ValueOf(&q.KeyQ),
			"KeyR":            reflect.ValueOf(&q.KeyR),
			"KeyRight":        reflect.ValueOf(&q.KeyRight),
			"KeyRightBracket": reflect.ValueOf(&q.KeyRightBracket),
			"KeyS":            reflect.ValueOf(&q.KeyS),
			"KeyScrollLock":   reflect.ValueOf(&q.KeyScrollLock),
			"KeySemicolon":    reflect.ValueOf(&q.KeySemicolon),
			"KeyShift":        reflect.ValueOf(&q.KeyShift),
			"KeySlash":        reflect.ValueOf(&q.KeySlash),
			"KeySpace":        reflect.ValueOf(&q.KeySpace),
			"KeyT":            reflect.ValueOf(&q.KeyT),
			"KeyTab":          reflect.ValueOf(&q.KeyTab),
			"KeyU":            reflect.ValueOf(&q.KeyU),
			"KeyUp":           reflect.ValueOf(&q.KeyUp),
			"KeyV":            reflect.ValueOf(&q.KeyV),
			"KeyW":            reflect.ValueOf(&q.KeyW),
			"KeyX":            reflect.ValueOf(&q.KeyX),
			"KeyY":            reflect.ValueOf(&q.KeyY),
			"KeyZ":            reflect.ValueOf(&q.KeyZ),
		},
		Funcs: map[string]reflect.Value{
			"Exit__0":                  reflect.ValueOf(q.Exit__0),
			"Exit__1":                  reflect.ValueOf(q.Exit__1),
			"GetWidget_":               reflect.ValueOf(q.GetWidget_),
			"Gopt_Game_Main":           reflect.ValueOf(q.Gopt_Game_Main),
			"Gopt_Game_Reload":         reflect.ValueOf(q.Gopt_Game_Reload),
			"Gopt_Game_Run":            reflect.ValueOf(q.Gopt_Game_Run),
			"Gopt_SpriteImpl_Clone__0": reflect.ValueOf(q.Gopt_SpriteImpl_Clone__0),
			"Gopt_SpriteImpl_Clone__1": reflect.ValueOf(q.Gopt_SpriteImpl_Clone__1),
			"Iround":                   reflect.ValueOf(q.Iround),
			"RGB":                      reflect.ValueOf(q.RGB),
			"RGBA":                     reflect.ValueOf(q.RGBA),
			"RGBAf":                    reflect.ValueOf(q.RGBAf),
			"RGBf":                     reflect.ValueOf(q.RGBf),
			"Rand__0":                  reflect.ValueOf(q.Rand__0),
			"Rand__1":                  reflect.ValueOf(q.Rand__1),
			"Sched":                    reflect.ValueOf(q.Sched),
			"SchedNow":                 reflect.ValueOf(q.SchedNow),
			"SetDebug":                 reflect.ValueOf(q.SetDebug),
			"WaitUtil":                 reflect.ValueOf(q.WaitUtil),
		},
		TypedConsts: map[string]igop.TypedConst{
			"AllOtherScripts":      {reflect.TypeOf(q.AllOtherScripts), constant.MakeInt64(int64(q.AllOtherScripts))},
			"AllSprites":           {reflect.TypeOf(q.AllSprites), constant.MakeInt64(int64(q.AllSprites))},
			"AnimChannelFrame":     {reflect.TypeOf(q.AnimChannelFrame), constant.MakeString(string(q.AnimChannelFrame))},
			"AnimChannelGlide":     {reflect.TypeOf(q.AnimChannelGlide), constant.MakeString(string(q.AnimChannelGlide))},
			"AnimChannelMove":      {reflect.TypeOf(q.AnimChannelMove), constant.MakeString(string(q.AnimChannelMove))},
			"AnimChannelTurn":      {reflect.TypeOf(q.AnimChannelTurn), constant.MakeString(string(q.AnimChannelTurn))},
			"BrightnessEffect":     {reflect.TypeOf(q.BrightnessEffect), constant.MakeInt64(int64(q.BrightnessEffect))},
			"ColorEffect":          {reflect.TypeOf(q.ColorEffect), constant.MakeInt64(int64(q.ColorEffect))},
			"DbgFlagAll":           {reflect.TypeOf(q.DbgFlagAll), constant.MakeInt64(int64(q.DbgFlagAll))},
			"DbgFlagEvent":         {reflect.TypeOf(q.DbgFlagEvent), constant.MakeInt64(int64(q.DbgFlagEvent))},
			"DbgFlagInstr":         {reflect.TypeOf(q.DbgFlagInstr), constant.MakeInt64(int64(q.DbgFlagInstr))},
			"DbgFlagLoad":          {reflect.TypeOf(q.DbgFlagLoad), constant.MakeInt64(int64(q.DbgFlagLoad))},
			"DbgFlagPerf":          {reflect.TypeOf(q.DbgFlagPerf), constant.MakeInt64(int64(q.DbgFlagPerf))},
			"Down":                 {reflect.TypeOf(q.Down), constant.MakeInt64(int64(q.Down))},
			"Edge":                 {reflect.TypeOf(q.Edge), constant.MakeInt64(int64(q.Edge))},
			"EdgeBottom":           {reflect.TypeOf(q.EdgeBottom), constant.MakeInt64(int64(q.EdgeBottom))},
			"EdgeLeft":             {reflect.TypeOf(q.EdgeLeft), constant.MakeInt64(int64(q.EdgeLeft))},
			"EdgeRight":            {reflect.TypeOf(q.EdgeRight), constant.MakeInt64(int64(q.EdgeRight))},
			"EdgeTop":              {reflect.TypeOf(q.EdgeTop), constant.MakeInt64(int64(q.EdgeTop))},
			"FishEyeEffect":        {reflect.TypeOf(q.FishEyeEffect), constant.MakeInt64(int64(q.FishEyeEffect))},
			"GhostEffect":          {reflect.TypeOf(q.GhostEffect), constant.MakeInt64(int64(q.GhostEffect))},
			"Invalid":              {reflect.TypeOf(q.Invalid), constant.MakeInt64(int64(q.Invalid))},
			"Last":                 {reflect.TypeOf(q.Last), constant.MakeInt64(int64(q.Last))},
			"Left":                 {reflect.TypeOf(q.Left), constant.MakeInt64(int64(q.Left))},
			"LeftRight":            {reflect.TypeOf(q.LeftRight), constant.MakeInt64(int64(q.LeftRight))},
			"MOUSE_BUTTON_LEFT":    {reflect.TypeOf(q.MOUSE_BUTTON_LEFT), constant.MakeInt64(int64(q.MOUSE_BUTTON_LEFT))},
			"MOUSE_BUTTON_MIDDLE":  {reflect.TypeOf(q.MOUSE_BUTTON_MIDDLE), constant.MakeInt64(int64(q.MOUSE_BUTTON_MIDDLE))},
			"MOUSE_BUTTON_RIGHT":   {reflect.TypeOf(q.MOUSE_BUTTON_RIGHT), constant.MakeInt64(int64(q.MOUSE_BUTTON_RIGHT))},
			"MosaicEffect":         {reflect.TypeOf(q.MosaicEffect), constant.MakeInt64(int64(q.MosaicEffect))},
			"Mouse":                {reflect.TypeOf(q.Mouse), constant.MakeInt64(int64(q.Mouse))},
			"Next":                 {reflect.TypeOf(q.Next), constant.MakeInt64(int64(q.Next))},
			"None":                 {reflect.TypeOf(q.None), constant.MakeInt64(int64(q.None))},
			"Normal":               {reflect.TypeOf(q.Normal), constant.MakeInt64(int64(q.Normal))},
			"OtherScriptsInSprite": {reflect.TypeOf(q.OtherScriptsInSprite), constant.MakeInt64(int64(q.OtherScriptsInSprite))},
			"PlayContinue":         {reflect.TypeOf(q.PlayContinue), constant.MakeInt64(int64(q.PlayContinue))},
			"PlayPause":            {reflect.TypeOf(q.PlayPause), constant.MakeInt64(int64(q.PlayPause))},
			"PlayResume":           {reflect.TypeOf(q.PlayResume), constant.MakeInt64(int64(q.PlayResume))},
			"PlayRewind":           {reflect.TypeOf(q.PlayRewind), constant.MakeInt64(int64(q.PlayRewind))},
			"PlayStop":             {reflect.TypeOf(q.PlayStop), constant.MakeInt64(int64(q.PlayStop))},
			"Prev":                 {reflect.TypeOf(q.Prev), constant.MakeInt64(int64(q.Prev))},
			"Random":               {reflect.TypeOf(q.Random), constant.MakeInt64(int64(q.Random))},
			"Right":                {reflect.TypeOf(q.Right), constant.MakeInt64(int64(q.Right))},
			"SoundPanEffect":       {reflect.TypeOf(q.SoundPanEffect), constant.MakeInt64(int64(q.SoundPanEffect))},
			"SoundPitchEffect":     {reflect.TypeOf(q.SoundPitchEffect), constant.MakeInt64(int64(q.SoundPitchEffect))},
			"StateDie":             {reflect.TypeOf(q.StateDie), constant.MakeString(string(q.StateDie))},
			"StateGlide":           {reflect.TypeOf(q.StateGlide), constant.MakeString(string(q.StateGlide))},
			"StateStep":            {reflect.TypeOf(q.StateStep), constant.MakeString(string(q.StateStep))},
			"StateTurn":            {reflect.TypeOf(q.StateTurn), constant.MakeString(string(q.StateTurn))},
			"ThisScript":           {reflect.TypeOf(q.ThisScript), constant.MakeInt64(int64(q.ThisScript))},
			"ThisSprite":           {reflect.TypeOf(q.ThisSprite), constant.MakeInt64(int64(q.ThisSprite))},
			"UVEffect":             {reflect.TypeOf(q.UVEffect), constant.MakeInt64(int64(q.UVEffect))},
			"Up":                   {reflect.TypeOf(q.Up), constant.MakeInt64(int64(q.Up))},
			"WhirlEffect":          {reflect.TypeOf(q.WhirlEffect), constant.MakeInt64(int64(q.WhirlEffect))},
		},
		UntypedConsts: map[string]igop.UntypedConst{
			"All":        {"untyped int", constant.MakeInt64(int64(q.All))},
			"GopPackage": {"untyped bool", constant.MakeBool(bool(q.GopPackage))},
			"Gop_sched":  {"untyped string", constant.MakeString(string(q.Gop_sched))},
		},
	})
}
